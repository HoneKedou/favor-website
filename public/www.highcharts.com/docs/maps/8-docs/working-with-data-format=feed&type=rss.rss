<?xml version="1.0" encoding="utf-8"?>
<!-- generator="Joomla! - Open Source Content Management" -->
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Maps</title>
		<description><![CDATA[Highcharts - Interactive JavaScript charts for your web pages.]]></description>
		<link>http://www.highcharts.com/docs/maps/8-docs/working-with-data</link>
		<lastBuildDate>Mon, 11 Aug 2014 00:43:09 +0000</lastBuildDate>
		<generator>Joomla! - Open Source Content Management</generator>
		<atom:link rel="self" type="application/rss+xml" href="http://www.highcharts.com/docs/maps/8-docs/working-with-data?format=feed&amp;type=rss"/>
		<language>en-gb</language>
		<item>
			<title>Getting data across domains (JSONP)</title>
			<link>http://www.highcharts.com/docs/working-with-data/getting-data-across-domains-jsonp</link>
			<guid isPermaLink="true">http://www.highcharts.com/docs/working-with-data/getting-data-across-domains-jsonp</guid>
			<description><![CDATA[<div class="feed-description"><h1>Cross domain data</h1>
<p>It is not possible to use the jQuery .getJSON() function on JSON files outside of your own domain. It is however possible to use JSONP.</p>
<p>The difference between JSON and JSONP is that in a regular JSON file you would just use the ordinary JSON syntax. This can not be returned cross domain. With JSONP what is done is wrapping the JSON content with a callback function in PHP which returns a json object. This can come in handy if the data you wish to display is on another domain than your own. A great number of data providers have JSONP services, for example Google and Twitter.</p>
<p>Here is an example:</p>
<ul>
<li>The serverside php file:</li>
</ul>
<pre>&lt;?php
header("content-type: application/json"); 

$array = array(7,4,2,8,4,1,9,3,2,16,7,12);

echo $_GET['callback']. '('. json_encode($array) . ')';    

?&gt;
</pre>
<ul>
<li>The JavaScript calling the callback function using jQuery.</li>
</ul>
<pre>$(document).ready(function() {
    var options = {
        chart: {
            renderTo: 'container',
            type: 'spline'
        },
        series: [{}]
    };
    
    var url =  "http://url-to-your-remote-server/jsonp.php?callback=?";
    $.getJSON(url,  function(data) {
        options.series[0].data = data;
        var chart = new Highcharts.Chart(options);
    });
});
</pre>
<p>&nbsp;</p></div>]]></description>
			<author>torstein@highsoft.com (Super User)</author>
			<category>Working with data</category>
			<pubDate>Thu, 22 Aug 2013 09:31:34 +0000</pubDate>
		</item>
		<item>
			<title>Preprocessing data from a database</title>
			<link>http://www.highcharts.com/docs/working-with-data/preprocessing-data-from-a-database</link>
			<guid isPermaLink="true">http://www.highcharts.com/docs/working-with-data/preprocessing-data-from-a-database</guid>
			<description><![CDATA[<div class="feed-description"><h1>
    Preprocessing data from a database</h1>
<p>
    Highcharts runs on the client side only, and is completely ignorant of how your server is set up. This means that if your server is running PHP and MySQL, or any other type of server technology coupled with any SQL engine, you can dynamically produce the HTML and JavaScript required by Highcharts.&nbsp;</p>
<p>
    There are a number of ways to do this. One way is to make a specific PHP file that only contains the data, call this dynamically from jQuery using Ajax, and add it to the configuration object before the chart is generated. Or you can have one PHP file that returns the entire JavaScript setup of your chart. Or, in the most basic way, just add some PHP code within your parent HTML page that handles the data from the chart. Below is a basic, low level example of how to pull data from a MySQL table and add it to your chart.</p>
<div>
    &nbsp;</div>
<div>
    <strong>Simple data with regular x intervals</strong></div>
<pre>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&lt;?php
while ($row = mysql_fetch_array($result)) {</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp;$data[] = $row[&#39;value&#39;];</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">}</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">?&gt;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">var chart = new Highcharts.Chart({</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; chart: {</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;renderTo: &#39;container&#39;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; },</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; series: [{</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data: [&lt;?php echo join($data, &#39;,&#39;) ?&gt;],</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pointStart: 0,</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pointInterval</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; }]</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">});</span></pre>
<p>
    <strong>Including x values</strong></p>
<p>
    Say you have a datetime x axis and irregular intervals between the points. Then you can&#39;t use the pointInterval approach like above, but you need to get the datetime for each point. Your code may now look like this:</p>
<pre>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&lt;?php
while ($row = mysql_fetch_array($result)) {</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp;extract $row;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp;$datetime *= 1000; // convert from Unix timestamp to JavaScript time</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp;$data[] = &quot;[$datetime, $value]&quot;;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">}</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">?&gt;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">var chart = new Highcharts.Chart({</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; chart: {</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;renderTo: &#39;container&#39;</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; },</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; series: [{</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data: [&lt;?php echo join($data, &#39;,&#39;) ?&gt;]</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">&nbsp; &nbsp; &nbsp; }]</span>
<span style="font-family: Monaco, 'Andale Mono', 'Courier New', Courier, mono; line-height: 15px; ">});</span></pre>
<div>
    As an alternative to this low-level approach, also consider <a href="http://php.net/manual/en/function.json-encode.php">json_encode</a> for writing the entire options structure in PHP.</div>
<p>
    &nbsp;</p></div>]]></description>
			<author>torstein@highsoft.com (Super User)</author>
			<category>Working with data</category>
			<pubDate>Thu, 22 Aug 2013 09:31:14 +0000</pubDate>
		</item>
		<item>
			<title>Preprocessing live data</title>
			<link>http://www.highcharts.com/docs/working-with-data/preprocessing-live-data</link>
			<guid isPermaLink="true">http://www.highcharts.com/docs/working-with-data/preprocessing-live-data</guid>
			<description><![CDATA[<div class="feed-description"><h1>Preprocessing live data</h1>
<p>After a chart has been defined by the configuration object, optionally preprocessed and finally initialized and rendered using new Highcharts.Chart(), we have the opportunity to alter the chart using a toolbox of API methods. The chart, axis, series and point objects have a range of methods like update, remove, addSeries, addPoints and so on. The complete list can be seen in the <a href="http://www.highcharts.com/ref/">API Reference</a> under "Methods and Properties" at the left.</p>
<h2>Setting up a live chart</h2>
<p>The following example shows how to run a live chart with data retrieved from the server each second, or more precisely, one second after the server's last reply. It is done by setting up a custom function, requestData, that initially is called from the chart's load event, and subsequently from its own Ajax success callback function. You can see the results live at <a href="http://www.highcharts.com/studies/live-server.htm">live-server.htm</a>.</p>
<ol>
<li><strong>Set up the server.</strong> In this case, we have a simple PHP script returning a JavaScript array with the JavaScript time and a random y value. This is the contents of the <a href="http://www.highcharts.com/studies/live-server-data.php">live-server-data.php</a> file:</li>
</ol>
<pre style="margin-left: 40px;">&lt;?php
// Set the JSON header
header("Content-type: text/json");

// The x value is the current JavaScript time, which is the Unix time multiplied <br />// by 1000.
$x = time() * 1000;
// The y value is a random number
$y = rand(0, 100);

// Create a PHP array and echo it as JSON
$ret = array($x, $y);
echo json_encode($ret);
?&gt;
</pre>
<ol start="2">
<li><strong>Define the chart variable globally</strong>, as we want to access it both from the document ready function and our requestData funcion. If the chart variable is defined inside the document ready callback function, it will not be available in the global scope later.</li>
</ol>
<pre style="margin-left: 40px;">var chart; // global
</pre>
<ol start="3">
<li><strong>Set up the requestData function.</strong> In this case it uses jQuery's $.ajax method to handle the Ajax stuff, but it could just as well use any other Ajax framework. When the data is successfully received from the server, the string is eval'd and added to the chart's first series using the Highcharts addPoint method. If the series length is greater than 20, we shift off the first point so that the series will move to the left rather than just cram the points tighter.</li>
</ol>
<pre style="margin-left: 40px;">/**
&nbsp;* Request data from the server, add it to the graph and set a timeout <br /> * to request again
&nbsp;*/
function requestData() {
&nbsp; &nbsp; $.ajax({
&nbsp; &nbsp; &nbsp; &nbsp; url: 'live-server-data.php',
&nbsp; &nbsp; &nbsp; &nbsp; success: function(point) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var series = chart.series[0],
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; shift = series.data.length &gt; 20; // shift if the series is <br />                                                 // longer than 20<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // add the point
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chart.series[0].addPoint(point, true, shift);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // call it again after one second
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setTimeout(requestData, 1000); &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; cache: false
&nbsp; &nbsp; });
}
</pre>
<ol start="4">
<li>Create the chart. Notice how our requestData function is initially called from the chart's load event. The initial data is an empty array.</li>
</ol>
<pre style="margin-left: 40px;">$(document).ready(function() {
    chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            defaultSeriesType: 'spline',
            events: {
                load: requestData
            }
        },
        title: {
            text: 'Live random data'
        },
        xAxis: {
            type: 'datetime',
            tickPixelInterval: 150,
            maxZoom: 20 * 1000
        },
        yAxis: {
            minPadding: 0.2,
            maxPadding: 0.2,
            title: {
                text: 'Value',
                margin: 80
            }
        },
        series: [{
            name: 'Random data',
            data: []
        }]
    });        
});
</pre></div>]]></description>
			<author>torstein@highsoft.com (Super User)</author>
			<category>Working with data</category>
			<pubDate>Thu, 22 Aug 2013 09:30:58 +0000</pubDate>
		</item>
		<item>
			<title>Preprocessing data from a file (CSV, XML, JSON)</title>
			<link>http://www.highcharts.com/docs/working-with-data/preprocessing-data-from-a-file-csv-xml-json</link>
			<guid isPermaLink="true">http://www.highcharts.com/docs/working-with-data/preprocessing-data-from-a-file-csv-xml-json</guid>
			<description><![CDATA[<div class="feed-description"><h1>Preprocesssing data from a file</h1>
<p>When working with large amounts of data it is more convenient to store it somewhere else than in a JavaScript. Highcharts does not come with any predefined stucture for storing data other than directly in the options object, so the data needs to be parsed by a function to be plotted correctly. Below are examples on how to preprocess data from CSV, XML and JSON. Another option is to use databases, see&nbsp;<a href="http://www.highcharts.com//docs/working-with-data/preprocessing-data-from-a-database">Database connection</a>&nbsp;for a tutorial.</p>
<ul>
<li><a href="http://www.highcharts.com/#1">Preprocess data using CSV</a></li>
<li><a href="http://www.highcharts.com/#2">Preprocess data using XML</a></li>
<li><a href="http://www.highcharts.com/#3">Preprocess data using JSON</a></li>
</ul>
<h2><a name="1"></a>Preprocess data using CSV</h2>
<p>This example shows how to set up the basic chart options first, then do an Ajax call for the data, parse the data and add them in the proper format to the options. In this example, jQuery is used for handling Ajax, but you could just as well use MooTools' or Prototype's similar functions. All of the code runs in the $(document).ready event handler. The example can be seen live at <a href="http://highcharts.com/studies/data-from-csv.htm">data-from-csv.htm</a>.</p>
<div>&nbsp;</div>
<ol>
<li><strong>Create an external CSV file</strong> containing only the data. In this example, the file looks like below. The first line lists the categories with a dummy name in the first position. The subsequent lines list the data series name in the first position and values in the subsequent positions. In real life, you will often create the contents of this file using PHP or other server side programming languages. Or you may choose to use other markup formats like XML or JSON. In those cases, jQuery can also parse the data for you natively.</li>
</ol>
<pre style="margin-left: 40px;">Categories,Apples,Pears,Oranges,Bananas
John,8,4,6,5
Jane,3,4,2,3
Joe,86,76,79,77
Janet,3,16,13,15
</pre>
<ol start="2">
<li><strong>Define the initial, basic options. </strong>Note that we create empty arrays for the categories and series objects, so that we can just push values to them later.</li>
</ol>
<pre style="margin-left: 40px;">var options = {
    chart: {
        renderTo: 'container',
        defaultSeriesType: 'column'
    },
    title: {
        text: 'Fruit Consumption'
    },
    xAxis: {
        categories: []
    },
    yAxis: {
        title: {
            text: 'Units'
        }
    },
    series: []
};
</pre>
<ol start="3">
<li><strong>Put it all together.</strong> We use the jQuery.get method to get the contents of the data.csv file. In the success callback function, we parse the returned string, add the results to the categories and series members of the options object, and create the chart. Note that we can't create the chart outside the Ajax callback, as we have to wait for the data to be returned from the server.</li>
</ol>
<pre style="margin-left: 40px;">$.get('data.csv', function(data) {
    // Split the lines
    var lines = data.split('\n');
    
    // Iterate over the lines and add categories or series
    $.each(lines, function(lineNo, line) {
        var items = line.split(',');
        
        // header line containes categories
        if (lineNo == 0) {
            $.each(items, function(itemNo, item) {
                if (itemNo &gt; 0) options.xAxis.categories.push(item);
            });
        }
        
        // the rest of the lines contain data with their name in the first <br />        // position
        else {
            var series = {
                data: []
            };
            $.each(items, function(itemNo, item) {
                if (itemNo == 0) {
                    series.name = item;
                } else {
                    series.data.push(parseFloat(item));
                }
            });
            
            options.series.push(series);
    
        }
        
    });
    
    // Create the chart
    var chart = new Highcharts.Chart(options);
});
</pre>
<h2><a name="2"></a>Preprocess data using XML</h2>
<p>Loading data from an XML file is similar to the CSV approach. Since Highcharts does not come with a predefined XML data syntax, it is entirely up to you to write the XML and to define a parsing function for it. The downside of using XML over CSV is that it adds some markup to the data, leaving a larger footprint. How large the extra footprint is depends on how you mark up your data. For example, if you wrap each point with a &lt;point&gt; tag and load 1000 points, it will add some weight. If however you add a comma separated list of point values, it doesn't. The upside to using XML, at least for small data sets, is that you don't have to manually parse the incoming data. You can utilize jQuery's existing DOM parsing abilities to access the XML tree. We set up a live example for this at <a href="http://highcharts.com/studies/data-from-xml.htm">data-from-xml.htm</a>. The data can be viewed at <a href="http://highcharts.com/studies/data.xml">data.xml</a>. Below is the function used to parse the XML data and adding it to the options object.</p>
<pre style="margin-left: 40px;">// Load the data from the XML file 
$.get('data.xml', function(xml) {
    
    // Split the lines
    var $xml = $(xml);

    // push categories
    $xml.find('categories item').each(function(i, category) {
        options.xAxis.categories.push($(category).text());
    });

    // push series
    $xml.find('series').each(function(i, series) {

        var seriesOptions = {
            name: $(series).find('name').text(),
            data: []
        };

        // push data points
        $(series).find('data point').each(function(i, point) {
            seriesOptions.data.push(
                parseInt($(point).text())
            );
        });

        // add it to the options
        options.series.push(seriesOptions);
    });

    var chart = new Highcharts.Chart(options);
});</pre>
<h2><a name="3"></a>Preprocess data using JSON</h2>
<p>JSON has the advantage of already being JavaScript, meaning that in many cases no preprocessing is needed. Another advantage to using JSON is that PHP has a built in function called json_encode(); which returns a JavaScript array that can be used directly in Highcharts.</p>
<p>Here is a basic example with a JSON file containing the data shown and using the jQuery .getJSON function to load it.</p>
<ul>
<li>The JSON file</li>
</ul>
<pre style="margin-left: 40px;">[
[1,12],
[2,5],
[3,18],
[4,13],
[5,7],
[6,4],
[7,9],
[8,10],
[9,15],
[10,22]
]
</pre>
<ul>
<li>Using getJSON to preprocess the options and then create the chart.</li>
</ul>
<pre style="margin-left: 40px;">$(document).ready(function() {

    var options = {
        chart: {
            renderTo: 'container',
            type: 'spline'
        },
        series: [{}]
    };

    $.getJSON('data.json', function(data) {
        options.series[0].data = data;
        var chart = new Highcharts.Chart(options);
    });

});
</pre>
<p>There are two things to note here:</p>
<ol>
<li>The data from the external JSON file should be loaded into the chart options before the chart is created. This is a best practice suggestion, since creating the chart and then loading the data into it requires means drawing the chart twice.</li>
<li>The data.json file in the example is on the same domain as the chart itself, the .getJSON function does not work cross domains. To load JSON files cross domain, JSONP needs to be used, see&nbsp;<a href="http://www.highcharts.com//docs/working-with-data/getting-data-across-domains-jsonp">Cross domain data</a>.</li>
</ol></div>]]></description>
			<author>torstein@highsoft.com (Super User)</author>
			<category>Working with data</category>
			<pubDate>Thu, 22 Aug 2013 09:30:23 +0000</pubDate>
		</item>
		<item>
			<title>Preprocessing</title>
			<link>http://www.highcharts.com/docs/working-with-data/preprocessing</link>
			<guid isPermaLink="true">http://www.highcharts.com/docs/working-with-data/preprocessing</guid>
			<description><![CDATA[<div class="feed-description"><h1>
    Preprocessing</h1>
<p>
    If working with dynamic data from say a database or the data presented in the chart is large, it is not a viable option to store the code static in the chart configuration. It is here preprocessing comes in.&nbsp;What we mean by preprocessing is having data stored somewhere, fetch it, formatting it to a readable format for Highcharts, and apply it to the chart before the chart is drawn. This is done both for convenience and performance.</p>
<p>
    We will cover the following topics:</p>
<ul>
    <li>
        <a href="http://www.highcharts.com//docs/working-with-data/preprocessing-data-from-a-file-csv-xml-json">Preprocesssing data from a file</a></li>
    <li>
        <a href="http://www.highcharts.com//docs/working-with-data/preprocessing-live-data">Preprocessing live data</a></li>
    <li>
        <a href="http://www.highcharts.com//docs/working-with-data/preprocessing-data-from-a-database">Preprocessing data from a database</a></li>
    <li>
        <a href="http://www.highcharts.com//docs/working-with-data/getting-data-across-domains-jsonp">Getting data across domains (JSONP)</a></li>
</ul>
<p>
    &nbsp;</p></div>]]></description>
			<author>torstein@highsoft.com (Super User)</author>
			<category>Working with data</category>
			<pubDate>Thu, 22 Aug 2013 09:30:08 +0000</pubDate>
		</item>
	</channel>
</rss>

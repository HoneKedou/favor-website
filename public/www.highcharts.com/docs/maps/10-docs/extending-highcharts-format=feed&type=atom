<?xml version="1.0" encoding="utf-8"?>
<!-- generator="Joomla! - Open Source Content Management" -->
<feed xmlns="http://www.w3.org/2005/Atom"  xml:lang="en-gb">
	<title type="text">Maps</title>
	<subtitle type="text">Highcharts - Interactive JavaScript charts for your web pages.</subtitle>
	<link rel="alternate" type="text/html" href="http://www.highcharts.com"/>
	<id>http://www.highcharts.com/docs/maps/10-docs/extending-highcharts</id>
	<updated>2014-08-11T00:43:12+00:00</updated>
	<generator uri="http://joomla.org" version="2.5">Joomla! - Open Source Content Management</generator>
	<link rel="self" type="application/atom+xml" href="http://www.highcharts.com/docs/maps/10-docs/extending-highcharts?format=feed&amp;type=atom"/>
	<entry>
		<title>Extending Highcharts</title>
		<link rel="alternate" type="text/html" href="http://www.highcharts.com/docs/extending-highcharts/extending-highcharts"/>
		<published>2013-08-22T09:33:18+00:00</published>
		<updated>2013-08-22T09:33:18+00:00</updated>
		<id>http://www.highcharts.com/docs/extending-highcharts/extending-highcharts</id>
		<author>
			<name>Super User</name>
			<email>torstein@highsoft.com</email>
		</author>
		<summary type="html">&lt;div class=&quot;feed-description&quot;&gt;&lt;h1&gt;Extending Highcharts&lt;/h1&gt;
&lt;p&gt;Since version 2.3, Highcharts is built in a modular way with extensions in mind.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major chart concepts correspond to JavaScript prototypes or &quot;classes&quot; which are exposed on the Highcharts namespace and can easily be modified. Examples are Highcharts.Series, Highcharts.Tooltip, Highcharts.Chart, Highcharts.Axis, Highcharts.Legend etc.&lt;/li&gt;
&lt;li&gt;Constructor logic is consequently kept in a method, &lt;code&gt;init&lt;/code&gt;, to allow overriding the initiation.&lt;/li&gt;
&lt;li&gt;Events can be added to the instance through framework event binding. If your framework is jQuery, you can for example run&lt;br /&gt; &lt;code&gt;$(chart).bind('load', someFunction);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some, but not all, prototypes and properties are listed at &lt;a href=&quot;http://api.highcharts.com&quot;&gt;api.highcharts.com&lt;/a&gt; under Methods and Properties. Some prototypes and properties are not listed, which means they may change in future versions as we optimize and adapt the library. We do not discourage using these members, but warn that your plugin should be tested with future versions of Highcharts. These members can be identified by inspecting the Highcharts namespace as well as generated chart objects in developer tools, and by studying the source code of highcharts.src.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Wrapping up a plugin&lt;/h2&gt;
&lt;p&gt;Like jQuery plugins, Highcharts plugins should be wrapped in an anonymous self-executing&amp;nbsp;function in order to prevent variable&amp;nbsp;pollution to the global scope. A good practice is to wrap plugins like this:&lt;/p&gt;
&lt;pre&gt;(function (H) {
   var localVar,         // local variable
      Series = H.Series; // shortcut to Highcharts prototype
   doSomething();
&lt;span style=&quot;line-height: 1.6em;&quot;&gt;}(Highcharts));&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Hooking up to Chart.init&lt;/h2&gt;
&lt;p&gt;In order to add event listeners to existing parts of a chart, a general callback function can be registered to run after the chart is first rendered. This can be done by pushing the function to the Chart.prototype.callbacks array:&lt;/p&gt;
&lt;pre&gt;H.Chart.prototype.callbacks.push(function (chart) {
   H.addEvent(chart.container, 'click', function (e) {
      e = chart.pointer.normalize();
      console.log('Clicked chart at ' + e.chartX + ', ' + e.chartY );
   });
   H.addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {
      console.log('Set extremes to ' + e.min + ', ' + e.max);
   });
});
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/highcharts/K7pN9/&quot;&gt;Try it live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Wrapping prototype functions&lt;/h2&gt;
&lt;p&gt;JavaScript with its dynamic nature is extremely powerful when it comes to altering the behaviour of scripts on the fly. In Highcharts we created a utility called &lt;code&gt;wrap&lt;/code&gt;, which wraps an existing prototype function (&quot;method&quot;) and allows you to add your own code before or after it.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The wrap function accepts the parent object as the first argument, the name of the function to wrap as the second, and a callback replacement function as the third.&amp;nbsp;&lt;span style=&quot;line-height: 19.1875px;&quot;&gt;The original function is passed as the first argument to the replacement function, and original arguments follow after that.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It's best explained by a code sample:&lt;/p&gt;
&lt;pre&gt;H.wrap(H.Series.prototype, 'drawGraph', function (proceed) {

  // Before the original function
  console.log(&quot;We are about to draw the graph: &quot;, this.graph);

  // Now apply the original function with the original arguments, 
  // which are sliced off this function's arguments
  proceed.apply(this, Array.prototype.slice.call(arguments, 1));

  // Add some code after the original function
  console.log(&quot;We just finished drawing the graph: &quot;, this.graph);

});
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/highcharts/DuuBr/&quot;&gt;Try it live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Example extension&lt;/h2&gt;
&lt;p&gt;In this example the client wanted to use&amp;nbsp;markers (&quot;trackballs&quot;)&amp;nbsp;on column type series in Highstock. Markers is currently only supported in line type series. To get this functionality, a small plugin can be written.&lt;/p&gt;
&lt;p&gt;This plugin will add a trackball to each series in the chart, that does not already support and&amp;nbsp;contain a marker.&lt;/p&gt;
&lt;p&gt;To gain this we start with the following code, creating a self-executing function to contain the plugin:&lt;/p&gt;
&lt;pre&gt;
(function (H) {
    // This is a self executing function
    // The global variable Highcharts is passed along with a reference H
}(Highcharts));
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Afterwards, we need to add extra functionality to the methods &lt;code&gt;Tooltip.prototype.refresh&lt;/code&gt; and &lt;code&gt;Tooltip.prototype.hide&lt;/code&gt;. For this, we wrap the methods:&lt;/p&gt;
&lt;pre&gt;
(function (H) {
    H.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {
        // When refresh is called, code inside this wrap is executed
    });
}(Highcharts));
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;When refresh is called, we want it to draw a trackball on the current point in each series. If a series already contains a marker this function should be dropped.&lt;/p&gt;
&lt;pre&gt;
    H.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {

        // Run the original proceed method
        proceed.apply(this, Array.prototype.slice.call(arguments, 1));

        // For each point add or update trackball
        H.each(points, function (point) {
            // Function variables
            var series = point.series,
                chart = series.chart,
                pointX = point.plotX + series.xAxis.pos,
                pointY = H.pick(point.plotClose, point.plotY) + series.yAxis.pos;

            // If trackball functionality does not already exist
            if (!series.options.marker) {
                // If trackball is not defined
                if (!series.trackball) {
                    // Creates a new trackball with same color as the series
                    series.trackball = chart.renderer.circle(pointX, pointY, 5).attr({
                        fill: series.color,
                        stroke: 'white',
                        'stroke-width': 1,
                        zIndex: 5
                    }).add();
                } else {
                    // Updates the position of the trackball
                    series.trackball.attr({
                        x: pointX,
                        y: pointY
                    });
                }
            }
        });
    });
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Now the trackball will be displayed, but we also need to hide it when the tooltip is removed. Therefore som extra functionality is also needed in the hide method. A new wrap is added inside the function containing the plugin:&lt;/p&gt;
&lt;pre&gt;
H.wrap(H.Tooltip.prototype, 'hide', function (proceed) {
    var series = this.chart.series;
    // Run original proceed method
    proceed.apply(this);
    // For each series destroy trackball
    H.each(series, function (serie) {
        var trackball = serie.trackball;
        if (trackball) {
            serie.trackball = trackball.destroy();
        }
    });
});&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;That was all, the whole &lt;a href=&quot;http://jsfiddle.net/highcharts/nhVbs/&quot;&gt;sample can be viewed in jsFiddle&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;</summary>
		<content type="html">&lt;div class=&quot;feed-description&quot;&gt;&lt;h1&gt;Extending Highcharts&lt;/h1&gt;
&lt;p&gt;Since version 2.3, Highcharts is built in a modular way with extensions in mind.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major chart concepts correspond to JavaScript prototypes or &quot;classes&quot; which are exposed on the Highcharts namespace and can easily be modified. Examples are Highcharts.Series, Highcharts.Tooltip, Highcharts.Chart, Highcharts.Axis, Highcharts.Legend etc.&lt;/li&gt;
&lt;li&gt;Constructor logic is consequently kept in a method, &lt;code&gt;init&lt;/code&gt;, to allow overriding the initiation.&lt;/li&gt;
&lt;li&gt;Events can be added to the instance through framework event binding. If your framework is jQuery, you can for example run&lt;br /&gt; &lt;code&gt;$(chart).bind('load', someFunction);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some, but not all, prototypes and properties are listed at &lt;a href=&quot;http://api.highcharts.com&quot;&gt;api.highcharts.com&lt;/a&gt; under Methods and Properties. Some prototypes and properties are not listed, which means they may change in future versions as we optimize and adapt the library. We do not discourage using these members, but warn that your plugin should be tested with future versions of Highcharts. These members can be identified by inspecting the Highcharts namespace as well as generated chart objects in developer tools, and by studying the source code of highcharts.src.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Wrapping up a plugin&lt;/h2&gt;
&lt;p&gt;Like jQuery plugins, Highcharts plugins should be wrapped in an anonymous self-executing&amp;nbsp;function in order to prevent variable&amp;nbsp;pollution to the global scope. A good practice is to wrap plugins like this:&lt;/p&gt;
&lt;pre&gt;(function (H) {
   var localVar,         // local variable
      Series = H.Series; // shortcut to Highcharts prototype
   doSomething();
&lt;span style=&quot;line-height: 1.6em;&quot;&gt;}(Highcharts));&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Hooking up to Chart.init&lt;/h2&gt;
&lt;p&gt;In order to add event listeners to existing parts of a chart, a general callback function can be registered to run after the chart is first rendered. This can be done by pushing the function to the Chart.prototype.callbacks array:&lt;/p&gt;
&lt;pre&gt;H.Chart.prototype.callbacks.push(function (chart) {
   H.addEvent(chart.container, 'click', function (e) {
      e = chart.pointer.normalize();
      console.log('Clicked chart at ' + e.chartX + ', ' + e.chartY );
   });
   H.addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {
      console.log('Set extremes to ' + e.min + ', ' + e.max);
   });
});
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/highcharts/K7pN9/&quot;&gt;Try it live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Wrapping prototype functions&lt;/h2&gt;
&lt;p&gt;JavaScript with its dynamic nature is extremely powerful when it comes to altering the behaviour of scripts on the fly. In Highcharts we created a utility called &lt;code&gt;wrap&lt;/code&gt;, which wraps an existing prototype function (&quot;method&quot;) and allows you to add your own code before or after it.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The wrap function accepts the parent object as the first argument, the name of the function to wrap as the second, and a callback replacement function as the third.&amp;nbsp;&lt;span style=&quot;line-height: 19.1875px;&quot;&gt;The original function is passed as the first argument to the replacement function, and original arguments follow after that.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It's best explained by a code sample:&lt;/p&gt;
&lt;pre&gt;H.wrap(H.Series.prototype, 'drawGraph', function (proceed) {

  // Before the original function
  console.log(&quot;We are about to draw the graph: &quot;, this.graph);

  // Now apply the original function with the original arguments, 
  // which are sliced off this function's arguments
  proceed.apply(this, Array.prototype.slice.call(arguments, 1));

  // Add some code after the original function
  console.log(&quot;We just finished drawing the graph: &quot;, this.graph);

});
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/highcharts/DuuBr/&quot;&gt;Try it live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Example extension&lt;/h2&gt;
&lt;p&gt;In this example the client wanted to use&amp;nbsp;markers (&quot;trackballs&quot;)&amp;nbsp;on column type series in Highstock. Markers is currently only supported in line type series. To get this functionality, a small plugin can be written.&lt;/p&gt;
&lt;p&gt;This plugin will add a trackball to each series in the chart, that does not already support and&amp;nbsp;contain a marker.&lt;/p&gt;
&lt;p&gt;To gain this we start with the following code, creating a self-executing function to contain the plugin:&lt;/p&gt;
&lt;pre&gt;
(function (H) {
    // This is a self executing function
    // The global variable Highcharts is passed along with a reference H
}(Highcharts));
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Afterwards, we need to add extra functionality to the methods &lt;code&gt;Tooltip.prototype.refresh&lt;/code&gt; and &lt;code&gt;Tooltip.prototype.hide&lt;/code&gt;. For this, we wrap the methods:&lt;/p&gt;
&lt;pre&gt;
(function (H) {
    H.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {
        // When refresh is called, code inside this wrap is executed
    });
}(Highcharts));
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;When refresh is called, we want it to draw a trackball on the current point in each series. If a series already contains a marker this function should be dropped.&lt;/p&gt;
&lt;pre&gt;
    H.wrap(H.Tooltip.prototype, 'refresh', function (proceed, points) {

        // Run the original proceed method
        proceed.apply(this, Array.prototype.slice.call(arguments, 1));

        // For each point add or update trackball
        H.each(points, function (point) {
            // Function variables
            var series = point.series,
                chart = series.chart,
                pointX = point.plotX + series.xAxis.pos,
                pointY = H.pick(point.plotClose, point.plotY) + series.yAxis.pos;

            // If trackball functionality does not already exist
            if (!series.options.marker) {
                // If trackball is not defined
                if (!series.trackball) {
                    // Creates a new trackball with same color as the series
                    series.trackball = chart.renderer.circle(pointX, pointY, 5).attr({
                        fill: series.color,
                        stroke: 'white',
                        'stroke-width': 1,
                        zIndex: 5
                    }).add();
                } else {
                    // Updates the position of the trackball
                    series.trackball.attr({
                        x: pointX,
                        y: pointY
                    });
                }
            }
        });
    });
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Now the trackball will be displayed, but we also need to hide it when the tooltip is removed. Therefore som extra functionality is also needed in the hide method. A new wrap is added inside the function containing the plugin:&lt;/p&gt;
&lt;pre&gt;
H.wrap(H.Tooltip.prototype, 'hide', function (proceed) {
    var series = this.chart.series;
    // Run original proceed method
    proceed.apply(this);
    // For each series destroy trackball
    H.each(series, function (serie) {
        var trackball = serie.trackball;
        if (trackball) {
            serie.trackball = trackball.destroy();
        }
    });
});&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;That was all, the whole &lt;a href=&quot;http://jsfiddle.net/highcharts/nhVbs/&quot;&gt;sample can be viewed in jsFiddle&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;/div&gt;</content>
		<category term="Extending Highcharts" />
	</entry>
</feed>

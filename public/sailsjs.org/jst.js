this["JST"] = this["JST"] || {};

this["JST"]["assets/templates/App.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<region default="Topbar"></region>\n<region data-id="page"></region>\n';

}
return __p
};

this["JST"]["assets/templates/Love.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1>Built with Love</h1>\n<p>\nThe Sails.js framework was developed by <a target="blank" href="https://twitter.com/mikermcneil">Mike McNeil</a> with the support of <a target="blank" href="http://balderdash.co">Balderdash</a>. We build realtime web apps as a service, and after much frustration with the lack of existing solutions, we created Sails to assist us on Node.js projects. Naturally we open-sourced it. We hope it makes your life a little bit easier!\n</p>\n<span class="c">&copy; 2012-2013 Sails.js. All Rights Reserved</span>\n';

}
return __p
};

this["JST"]["assets/templates/Subnavigation.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h3>Guides</h3>\n<ul class="guides">\n  <li><a class="nav-item" href="#!documentation/new-to-nodejs">New to Node.js?</a></li>\n  <li><a class="nav-item" href="#!documentation/What-Is-Sails">What is Sails?</a></li>\n  <li><a class="nav-item" href="#!documentation/models">Models</a></li>\n  <li><a class="nav-item" href="#!documentation/controllers">Controllers</a></li>\n  <li><a class="nav-item" href="#!documentation/assets">Assets</a></li>\n  <li><a class="nav-item" href="#!documentation/asset-management">Asset Management</a></li>\n  <li><a class="nav-item" href="#!documentation/routes">Routes</a></li>\n  <li><a class="nav-item" href="#!documentation/policies">Policies</a></li>\n  <li><a class="nav-item" href="#!documentation/views">Views</a></li>\n  <li><a class="nav-item" href="#!documentation/custom-adapters">Custom Adapters</a></li>\n  <li><a class="nav-item" href="#!documentation/deployment">Deployment</a></li>\n  <li><a class="nav-item" href="#!documentation/Migration-Guide">Migration Guide</a></li>\n</ul>\n\n<h3>Reference</h3>\n<ul class="reference">\n  <li><a class="nav-item" href="#!documentation/configuration">Configuration</a></li>\n  <li><a class="nav-item" href="#!documentation/changelog">Version Notes</a></li>\n  <li><a class="nav-item" href="#!documentation/Database-Support">Database Support</a></li>\n  <li><a class="nav-item" href="#!documentation/sockets">Sockets (socket.io)</a></li>\n  <li><a class="nav-item" href="#!documentation/roadmap">Road Map</a></li>\n</ul>\n\n<!-- <h3>Config</h3>\n<ul class="configuration">\n  <li><a class="nav-item" href="#!documentation/configuration">Overview</a></li>\n  <li><a class="nav-item" href="#!documentation/config.404">404</a></li>\n  <li><a class="nav-item" href="#!documentation/config.500">500</a></li>\n  <li><a class="nav-item" href="#!documentation/config.adapters">Adapters</a></li>\n  <li><a class="nav-item" href="#!documentation/config.bootstrap">Bootstrap</a></li>\n  <li><a class="nav-item" href="#!documentation/config.controllers">Controllers</a></li>\n  <li><a class="nav-item" href="#!documentation/config.csrf">CSRF</a></li>\n  <li><a class="nav-item" href="#!documentation/config.local">Local</a></li>\n  <li><a class="nav-item" href="#!documentation/config.locales">Locales</a></li>\n  <li><a class="nav-item" href="#!documentation/config.log">Log</a></li>\n  <li><a class="nav-item" href="#!documentation/config.policies">Policies</a></li>\n  <li><a class="nav-item" href="#!documentation/config.routes">Routes</a></li>\n  <li><a class="nav-item" href="#!documentation/config.session">Session</a></li>\n  <li><a class="nav-item" href="#!documentation/config.sockets">Sockets</a></li>\n  <li><a class="nav-item" href="#!documentation/config.views">Views</a></li>\n</ul> -->\n\n';

}
return __p
};

this["JST"]["assets/templates/Topbar.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="topbar">\n\n  <!-- <div class="docs-menu clearfix">\n    <img src="images/icon_mobile_documentationnav@2x.png" />\n  </div> -->\n  \n  <div class="menu clearfix">\n    <img src="images/icon_mobile_hamburger@2x.png" />\n  </div>\n  <div class="container clearfix">\n    <a href="#!">\n      <img class="logo" src="/images/sails-logo.jpg" alt="Sails" />\n    </a>\n    <ul class="nav clearfix">\n      <li><a href="#!" id="home">Home</a></li>\n      <li><a href="#!getStarted">Get Started</a></li>\n      <li><a href="#!documentation">Documentation</a></li>\n      <li><a target="_blank" href="http://michaelmcneil.com">Blog</a></li>\n    </ul>\n  </div>\n  <ul class="mobile-nav dropdown-nav">\n    <a href="#!"><li class="house-icon"><p>Home</p></li></a>\n    <a href="#!getStarted"><li class="star-icon"><p>Get Started</p></li></a>\n    <a href="#!documentation"><li class="docs-icon"><p>Documentation</p></li></a>\n    <a target="_blank" href="http://michaelmcneil.com">\n      <li class="chat-icon"><p>Blog</p></li>\n    </a>\n  </ul>\n\n\n  <!-- <ul class="mobile-doc-nav dropdown-nav">\n    <li class="nav-item" id="new-to-nodejs">\n      <a class="top left" href="#!documentation/new-to-nodejs">New to Node.js?</a>\n    </li>\n    <li class="nav-item">\n      <a class="top right" href="#!documentation/models">Models</a>\n    </li>\n    <li class="nav-item">\n      <a class="left" href="#!documentation/controllers">Controllers</a>\n    </li>\n    <li class="nav-item">\n      <a class="right" href="#!documentation/routes">Routes</a>\n    </li>\n    <li class="nav-item">\n      <a class="left" href="#!documentation/policies">Policies</a>\n    </li>\n    <li class="nav-item">\n      <a class="right" href="#!documentation/views">Views</a>\n    </li>\n    <li class="nav-item">\n      <a class="left" href="#!documentation/custom-adapters">Custom Adapters</a>\n    </li>\n    <li class="nav-item">\n      <a class="right" href="#!documentation/deployment">Deployment</a>\n    </li>\n    <li class="nav-item">\n      <a class="left" href="#!documentation/changelog">Version Notes</a>\n    </li>\n    <li class="nav-item">\n      <a class="right" href="#!documentation/configuration">Configuration</a>\n    </li>\n    <li class="nav-item bottom">\n      <a class="left" href="#!documentation/sockets">Sockets (socket.io)</a>\n    </li>\n  </ul> -->\n</div>\n';

}
return __p
};

this["JST"]["assets/templates/docs/Contributing-to-Sails.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Contributing-to-Sails">\n<h1>Contributing to this project</h1>\n<p>Thank you for your interest in supporting Sails!  It makes us feel warm and fuzzy inside.  For real.</p>\n<h2>Guidelines</h2>\n<p>Like any OSS project, we must have guidelines for contributions.  It helps protect the quality of the code, and gives all of us confidence that our framework will be robust and dependable.\nWhether it&#39;s a bug fix, or a huge new feature set, it&#39;s important that we consistently apply these checks and balances for <em>all</em> contributions to Sails.</p>\n<p>Please check over the following requirements before submitting a pull request:\n - Pull requests should be submitted to the Development Branch.\n - Bug fixes should have accompanying tests.\n - Should follow Sails.JS JShint Guidelines (See .jshint file in repo)</p>\n<p>Any pull request to <code>master</code> (our production branch) will be closed, with an invitation to resubmit to <code>development</code>.<br>I know this stuff sounds kind of brutal, but we want to keep <code>master</code>&#39;s tests passing at all times, since it reflects what is in <code>npm</code>.\nIf you have a high priority hot-fix for the currently deployed version, please let us know with an issue, and mention @mikermcneil and @dcbartlett.  Also, for emergencies, please feel free to tweet @sailsjs.  That&#39;ll text me (Mike).  Sounds a little insane probably, but if there&#39;s a big problem, I want to know about it!</p>\n<p>Now that we are all on the same page, lets get to coding some awesomeness of our own :D</p>\n<h2>Fork</h2>\n<p>Start by forking <a href="https://github.com/balderdashy/sails/tree/development">this repository</a>:</p>\n<p><img src="http://i.imgur.com/h0CCcAu.png" alt="Screen Shot 2013-02-12 at 2.37.04 PM.png"></p>\n<h2>Clone</h2>\n<p>Then clone your fork into your local filesystem:\ngit clone <code>git@github.com:YOUR_USER_NAME/sails.git</code></p>\n<h2>Update</h2>\n<p>To merge recent changes into your fork, inside your project dir:</p>\n<pre><code>git remote add core https://github.com/balderdashy/sails.git\ngit fetch core\ngit merge core/master</code></pre>\n<p>additional details, see <a href="https://help.github.com/articles/fork-a-repo">github</a></p>\n<h2>Code</h2>\n<p>Make your enhancements, fix bugs, do your <code>thang</code>.</p>\n<h2>Test</h2>\n<p>Please write a test for your addition/fix.  I know it kind of sucks if you&#39;re not used to it, but it&#39;s how we maintain great code. \nFor our test suite, we use <a href="http://visionmedia.github.com/mocha/">mocha</a>.  You can run the tests with <code>npm test</code>.  If run into trouble with this part, please reach out to the <a href="https://groups.google.com/forum/#!forum/sailsjs">Google Group!</a></p>\n<p><img src="http://i.imgur.com/dalbOdZ.png" alt="Screen Shot 2013-02-12 at 2.56.59 PM.png"> </p>\n<h2>Pull Request</h2>\n<p>When you&#39;re done, you can commit your fix, push up your code, and then go into github and submit a pull request.  We&#39;ll look it over and get back to you ASAP.</p>\n<p><img src="http://i.imgur.com/GBg0AOi.png" alt="Screen Shot 2013-02-12 at 2.55.40 PM.png"> </p>\n<h2>Trying out your fork with your application</h2>\n<p>If you have a project using Sails, and you want to test your new version, please do the following:</p>\n<p>In your Sails repo:\nsudo npm link</p>\n<p>In your project repo:\nnpm link sails</p>\n<p>Tada!  Your project will now be using your forked version.  If you&#39;re not sure it worked, put some crazy <code>console.log()</code> in the core to make sure.  Again, if you&#39;ve got any issues, hit us up (<a href="https://twitter.com/sailsjs">@sailsjs</a>). </p>\n<p><a href="http://githalytics.com/balderdashy/sails/contributing"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Database-Support.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Database-Support">\n<h1>Database Support</h1>\n<blockquote>\n<p><em>Note: You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Sails uses <a href="https://github.com/balderdashy/waterline">Waterline</a> as its ORM, and supports all databases which have waterline adapters:</p>\n<ul>\n<li><a href="https://github.com/particlebanana/sails-postgresql">PostgreSQL</a> - <em>0.9+ compatible</em> - <code>sails-postgresql</code></li>\n<li><a href="https://github.com/balderdashy/sails-mysql">MySQL</a> - <em>0.9+ compatible</em> - <code>sails-mysql</code></li>\n<li><a href="https://github.com/balderdashy/sails-mongo">MongoDB</a> - <em>0.9+ compatible</em> - <code>sails-mongo</code></li>\n<li><a href="https://github.com/balderdashy/sails-memory">Memory</a> - <em>0.9+ compatible</em> - <code>sails-memory</code></li>\n<li><a href="https://github.com/balderdashy/sails-disk">Disk</a> - <em>0.9+ compatible</em> - <code>sails-disk</code></li>\n</ul>\n<h2>Developing Custom Adapters</h2>\n<p>If the database you need isn&#39;t listed above, you can help contribute to an existing project or create your own.\nCheck out <a href="https://github.com/balderdashy/sails/wiki/custom-adapters">https://github.com/balderdashy/sails/wiki/custom-adapters</a> to learn more about that.</p>\n<h2>In-Progress Community Adapters</h2>\n<ul>\n<li><a href="https://github.com/vanetix/sails-redis">Redis</a></li>\n<li><a href="https://github.com/balderdashy/sails-riak">Riak</a></li>\n<li><a href="https://github.com/craveprogramminginc/sails-couchdb">Couch</a></li>\n</ul>\n<h2>Other Community Adapters</h2>\n<p>Also, adapters are not limited to databases.  The Sails.js ORM (Waterline) can be hooked up to communiate with any asynchronous web service! \nWeb services like LDAP, Active Directory, and even things like Twitter and Facebook can be accessed via the ORM through adapters.\nYou can get pretty avante garde here.</p>\n<ul>\n<li><a href="https://github.com/balderdashy/sails-irc">IRC</a></li>\n<li><a href="https://github.com/balderdashy/sails-twitter">Twitter</a></li>\n<li><a href="https://github.com/mikermcneil/sails-jsdom">JSDom</a></li>\n</ul>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Guide:-Login-Example.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Guide:-Login-Example">\n<blockquote>\n<p><em>Note: You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>This example uses the <a href="https://github.com/ncb000gt/node.bcrypt.js">bcrypt</a> module to securely encrypt and compare passwords.\nBy default, the login action would be triggered in response to requests for /session/login; this behavior can be configured using <a href="https://github.com/balderdashy/sails/wiki/routes">custom routes</a>.</p>\n<pre><code class="lang-javascript">/*---------------------\n  :: Session \n    -&gt; controller\n---------------------*/\nvar bcrypt = require(&#39;bcrypt&#39;);\n\nvar SessionController = {\n\n    login: function(req, res) {\n\n        // Get password and username from request\n        var username = req.param(&#39;username&#39;);\n        var password = req.param(&#39;password&#39;);\n\n        // No username/password entered\n        if(!(username &amp;&amp; password)) {\n            return res.send(&#39;No username or password specified!&#39;, 500);\n        }\n        // Lookup the user in the database\n        User.findOne({\n            username: username\n        }).exec(function (err, user) {\n\n            // Account not found\n            if (err || !user) {\n                return res.send(&#39;Invalid username and password combination!&#39;, 500);\n            }\n\n            // Compare the passwords\n            bcrypt.compare(password, user.password, function(err, valid) {\n                if(err || !valid)\n                    return res.send(&#39;Invalid username and password combination!&#39;, 500)\n\n                // The user has authenticated successfully, set their session\n                req.session.authenticated = true;\n                req.session.User = user;\n\n                // Redirect to protected area\n                return res.redirect(&#39;/dashboard&#39;);\n            });\n        });\n    },\n\n    register: function(req, res){\n        var username = req.param(&#39;username&#39;);\n        var password = req.param(&#39;password&#39;);\n        var confirm = req.param(&#39;password-confirm&#39;);\n\n        // Make sure user has filled out the form correctly\n        if (!username || !password || !confirm || password !== confirm) {\n            return res.send(&#39;Please fill in all required fields&#39;, 500);\n        }\n\n        // Hash the password\n        bcrypt.hash(password, 10, function(err, hash) {\n            if (err) return res.send(&#39;An error occured&#39;, 500);\n\n            // Save user to the database\n            User.create({\n               username: username,\n               password: hash\n            }).exec(function(err, user){\n                if (err) return res.send(&#39;An error occured&#39;, 500);\n\n                // TODO: add email verification process\n                req.session.authenticated = true;\n                req.session.User = user;\n\n                // Redirect to protected area\n                return res.redirect(&#39;/dashboard&#39;);\n            })\n\n        });\n    }\n};\nmodule.exports = SessionController;</code></pre>\n<p><a href="http://githalytics.com/balderdashy/sails/wiki/loginExample"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Guide:-Passport-auth-example.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Guide:-Passport-auth-example">\n<blockquote>\n<p>Credit: @theangryangel</p>\n</blockquote>\n<p>I&#39;m not sure if this is of interest, but I&#39;ve been fiddling with sails for the first time tonight - in particular I was fiddling with adding passport into the mix</p>\n<p>The gist is a 20 minute PoC and totally shouldn&#39;t be used in production in this manner, but might be a good starting gist for someone else and might be useful as a companion to the Login Example wiki page.</p>\n<p><a href="https://gist.github.com/theangryangel/5060446">https://gist.github.com/theangryangel/5060446</a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Guide:-Using-policies-with-the-blueprint-API.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Guide:-Using-policies-with-the-blueprint-API">\n<p>Policies are use to prevent users from taking unauthorized actions.<br>Below is an example of retrieving the UserID from session and comparing it to the userid that is passed to the server.  This will verify that both the query is properly formed, and that the user is allowed to make that query.</p>\n<pre><code>// api/policies/userIdMatches.js\nmodule.exports = function (req,res,next) {\n\n    // Pick userId out of params\n    var specifiedUserId = req.param(&#39;UserId&#39;);\n\n    // If it was passed in as a query parameter, extract it\n    if (!specifiedUserId &amp;&amp; req.param(&#39;where&#39;)) {\n        specifiedUserId = req.param(&#39;where&#39;).UserId;\n    }\n\n    // If the specified user id matches the actual user id in the session, continue\n    if (req.session.userId === specifiedUserId)\n        next();\n    else\n        res.send(&#39;You don\\&#39;t have permission to use that userId.&#39;, 403);\n};</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Home.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Home">\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p><!--\nBuilding Your Own Adapters\nControllers\nDatabase Support\nexamples\nGuide: Login Example\nGuide: Passport auth example\nGuide: Sockets\nHome\nModels\nPolicies\nRoutes\nServices\nViews\nWhat Is Sails\n--></p>\n<h2>Getting Started and the Basics:</h2>\n<p><a href="#!documentation/new-to-nodejs">New to Node.js</a><br><a href="#!documentation/getting-started">Getting Started</a><br><a href="#!documentation/models">Models</a><br><a href="#!documentation/controllers">Controllers</a><br><a href="#!documentation/assets">Assets</a><br><a href="#!documentation/examples">examples</a></p>\n<h2>A little more Advanced:</h2>\n<p><a href="#!documentation/configuration">Configuration</a><br><a href="#!documentation/api.adapter-interface">Adapters</a><br><a href="#!documentation/policies">Policies</a><br><a href="#!documentation/services">Services</a><br><a href="#!documentation/sockets">Sockets</a>\n<a href="#!documentation/routes">Routes</a><br><a href="#!documentation/translation">Translation</a></p>\n<h2>Ready to Deploy?:</h2>\n<p><a href="#!documentation/deployment">Deployment</a>  </p>\n<h2>For those of you that would like to contribute.</h2>\n<p><a href="#!documentation/changelog">Changelog</a><br><a href="#!documentation/Contributing-to-Sails">Contributing to Sails</a>  </p>\n<p>See <a href="http://sailsjs.org/#!documentation">http://sailsjs.org/#!documentation</a> for a deeper dive.</p>\n<p><a href="http://githalytics.com/balderdashy/sails/wiki/home"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/Migration-Guide.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs Migration-Guide">\n<h1>Migration Guide</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Sail 0.9.x is a major upgrade from 0.8.x and you will need to make some changes in order for your application\nto be compatible with the new version. This guide will walk you through what has changed and what you\nwill need to update in your current codebase.</p>\n<h2>What Has Changed</h2>\n<p>In 0.9.x we have made some major updates. This is just a quick runthrough of some of the larger changes\nthat will probably affect an application that is currently running on 0.8.x. For a complete list of\nchanges you can view the <a href="#!documentation/changelog">Changelog</a>.</p>\n<h3>Express 3.x Support</h3>\n<p>In 0.9.x we have finally moved to <a href="http://expressjs.com/">Express 3</a> behind the scenes, which is\nwelcome news to many. This has some minor effect on applications that may have been using Express 2.x\nfunctionality but for most applications you will not need to change your code in order to be compatible\nwith the newer version. If you have custom middleware you may want to run through the\n<a href="https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x">Express 2.x to 3.x Migration Guide</a>\nto be sure it will continue to work.</p>\n<p>The one feature that has been removed from 3.x is support for layouts and view partials.\nSails 0.9 has been extended to support layouts and partials if you are using <code>ejs</code> or <code>jade</code> views but for\nother template languages you will need to stick to the Express 3.x conventions.</p>\n<h3>Assets</h3>\n<p>We are no longer using <a href="https://github.com/techpines/asset-rack">asset-rack</a> for compiling assets and\ninstead have moved all asset handling to <a href="http://gruntjs.com/">Grunt</a>. This gives you complete control\nover how you handle assets in both development and production modes.</p>\n<p>You are now able to take full advantage of the entire <a href="http://gruntjs.com/plugins">grunt-plugin</a>\necosystem. You can decide which template engine to use and which css preprocessor you prefer without\nhaving to worry about support from Sails core. It also allows you to configure the loading order of\nyour assets however you choose without having to seperate your files into multiple folders to control\nordering or alphabetically naming your files.</p>\n<p>We have provided a default <strong>Gruntfile</strong> which will be automatically added to new projects with some basic\ndefaults to get you started. For current projects which need a <strong>Gruntfile</strong> we will walk you through\ncreating one below.</p>\n<p>For more information on <a href="http://gruntjs.com/">Grunt</a> visit their website or read the official\n<a href="http://gruntjs.com/getting-started">Getting Started Guide</a>.</p>\n<h3>Waterline ORM</h3>\n<p>Waterline has been completely rewritten and split out into its own project again. In the new version\nthere are some exiciting features that have been added to help you build data-driven applications.</p>\n<p><a href="https://github.com/balderdashy/waterline#validations">Validations</a> are now fully supported for model attributes. You can see a full list of available validations on the <a href="https://github.com/balderdashy/sails/wiki/models">Models Page</a>.</p>\n<p>We also added support for Rails-like <a href="https://github.com/balderdashy/waterline#lifecycle-callbacks">Lifecycle Callbacks</a>. This gives you hooks into various stages of the data process to run functions. It&#39;s super useful for stuff like\nencrypting passwords in a <code>beforeCreate</code> method.</p>\n<p>One of the major changes that will effect your codebase are the changes away from <code>findAll</code>. We\nhave adopted a MongoDB-like syntax starting in 0.9 and have replaced the methods with <code>findOne</code> and\n<code>find</code>.</p>\n<p><code>find</code> will now return an array of values where before it would only return a single object and\n<code>findOne</code> will now return a single object.</p>\n<p>You will need to update these values throughout your codebase in order to get the expected results\nin your custom controllers. If you are using the blueprints for serving your data then you will not\nneed to make any changes on those controllers.</p>\n<p>For more information on the Waterline and Model interfaces you can read the updated\n<a href="https://github.com/balderdashy/sails/wiki/models">Models Page</a>.</p>\n<p>Information on <a href="https://github.com/balderdashy/waterline">Waterline</a> is available in the project&#39;s\nReadme file.</p>\n<h2>Migrating Your Application</h2>\n<p>The first step to migrating an application to 0.9.x will be handling your assets. This is the largest\npart of the transition as so much has changed.</p>\n<h3><strong>Step 1:</strong> Creating a Gruntfile</h3>\n<p>The first thing we will need to do is create a <code>Gruntfile.js</code> file in the top level of your application.\nSails 0.9.x has one included with some basic defaults we can use to get started. This will give you\nbackwards support for LESS css preprocessing and the ability to optionally add automatic asset injection\ninto your layout.</p>\n<ul>\n<li>Copy the <a href="https://github.com/balderdashy/sails/blob/development/bin/boilerplates/Gruntfile.js">Default Gruntfile</a> into your application&#39;s top-level directory and make sure the filename is <code>Gruntfile.js</code>.</li>\n</ul>\n<h3><strong>Step 2:</strong> Update Package.json</h3>\n<p>You will need to update your <code>package.json</code> file to include the new 0.9 version of Sails along with\nadding the Grunt dependency.</p>\n<ol>\n<li><p>Add the following options to your <code>package.json</code> file:</p>\n<ul>\n<li><code>&quot;sails&quot;: &quot;0.9.0&quot;</code></li>\n<li><code>&quot;grunt&quot;: &quot;0.4.1&quot;</code></li>\n</ul>\n</li>\n<li><p>Run <code>npm install</code> to install the new dependencies.</p>\n</li>\n</ol>\n<h3><strong>Step 3:</strong> Update Adapters Config</h3>\n<p>In Sails 0.8.x the default development adapter was <code>sails-dirty</code> which is an in-memory adapter that\nsyncs to disk. In Sails 0.9.x we have moved to our own development adapters named <code>sails-disk</code> and\n<code>sails-memory</code>. You will need to update your <code>config/adapters.js</code> file to reflect this.</p>\n<p>Your adapters config should have the following set for the disk and memory adapters.</p>\n<pre><code class="lang-javascript">module.exports.adapters = {\n\n  // If you leave the adapter config unspecified\n  // in a model definition, &#39;default&#39; will be used.\n  &#39;default&#39;: &#39;disk&#39;,\n\n  // In-memory adapter for DEVELOPMENT ONLY\n  memory: {\n    module: &#39;sails-memory&#39;\n  },\n\n  // Persistent adapter for DEVELOPMENT ONLY\n  // (data IS preserved when the server shuts down)\n  disk: {\n    module: &#39;sails-disk&#39;\n  }\n}</code></pre>\n<h3><strong>Step 4:</strong> Update Application Config Files</h3>\n<p>Sails 0.9.x exposes many more configuration options. It&#39;s a good idea to setup all these new configuration\nfiles to make working with your app easier. The new configuration options give you the ability to\noverride many of the settings that were previously unavailable as well as some new options such as\nremote session and socket storage.</p>\n<ol>\n<li>Delete <code>config/assets.js</code> as it&#39;s no longer needed.  Asset handling is performed by the new <code>Gruntfile.js</code>.</li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/local.js">local.js</a> file into <code>config/local.js</code></li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/controllers.js">controllers.js</a> file into <code>config/controllers.js</code></li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/sockets.js">sockets.js</a> file into <code>config/socket.js</code></li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/log.js">log.js</a> file into <code>config/log.js</code></li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/routes.js">routes.js</a> into <code>config/routes.js</code> and be sure to add in your old application&#39;s routes. This exposes the new <strong>404</strong> and <strong>500</strong> handlers.</li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/session.js">session.js</a> file into <code>config/session.js</code></li>\n<li>Copy over the new <a href="https://raw.github.com/balderdashy/sails/development/bin/boilerplates/config/views.js">views.js</a> file into <code>config/views.js</code></li>\n</ol>\n<h3><strong>Step 5:</strong> Handle Assets in the Deprecated Public Folder</h3>\n<p>In Sails 0.9.x the public folder is no longer supported. All assets are moved to the <code>assets</code> folder.\nThis will be handled by Grunt and copied into a <code>.tmp/public</code> folder which is served as static assets.</p>\n<p>This folder will contain all of your compiled and minified assets as well as any images or other assets\nyou have in you <code>assets</code> folder. It is designed in a way that it can be pushed to a CDN or served from\nsomewhere else if you would like.</p>\n<p>When you are ready to deploy you can run: <code>sails build</code> or alternatively <code>grunt build</code> to create a\n<code>www</code> folder in your top level directory that you can deploy to S3 or Cloudfront.</p>\n<ol>\n<li>Copy any assets you currently have in <code>public</code> over to the <code>assets</code> directory.</li>\n<li>Delete the <code>public</code> folder.</li>\n</ol>\n<h3><strong>Step 6:</strong> Remove Asset-Rack Partials from Layout</h3>\n<p>In your <code>views/layout.ejs</code> file you will need to remove the asset partials used by Asset-Rack. You now\nhave the option to choose how you want to include your assets. If you would like to point directly to\nyour assets they will available from the <code>.tmp/public</code> folder and can be included like:</p>\n<pre><code class="lang-html">&lt;link href=&quot;/styles/main.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n&lt;script src=&quot;/js/main.js&quot; type=&quot;text/javascript&quot;&gt;</code></pre>\n<p>If your application uses the realtime functionality of Sails through socket.io you will need to add\nthe library manually to your <code>layout.ejs</code> file.</p>\n<pre><code class="lang-html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sails.io.js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>We also have a Grunt plugin for linking your scripts automatically so you can continue working as you\ndid in 0.8.x.</p>\n<p>To use the script linker you will need to replace your asset-rack partials with a syntax defined\nin the <code>Gruntfile</code></p>\n<ul>\n<li><p>For stylesheets you can replace <code>&lt;%- assets.css() %&gt;</code> with the following:</p>\n<pre><code>&lt;!--STYLES--&gt;\n&lt;!--STYLES END--&gt;</code></pre>\n</li>\n<li><p>For javascript you can replace <code>&lt;%- assets.js() %&gt;</code> with the following:</p>\n<pre><code>&lt;!--SCRIPTS--&gt;\n&lt;!--SCRIPTS END--&gt;</code></pre>\n</li>\n<li><p>For templates you can replace <code>&lt;%- assets.templateLibrary() %&gt;</code> with the following:</p>\n<pre><code>&lt;!--TEMPLATES--&gt;\n&lt;!--TEMPLATES END--&gt;</code></pre>\n</li>\n</ul>\n<p>To get your assets automatically linked you will need to place any assets you want injected into the\nlayout into <code>assets/linker</code>. This will make your assets file structure look like:</p>\n<pre><code>assets/\n  images/\n  linker/\n    js/\n    styles/\n    templates/</code></pre>\n<h3><strong>Step 7:</strong> Update Global Sails</h3>\n<p>The last step is to update your global version of Sails to the new 0.9.x branch. This is the easiest\npart! Simply run the following command.</p>\n<pre><code class="lang-bash">$ npm update sails -g</code></pre>\n<p>Depending on how you installed NPM you may need to have sudo access to complete this. In that case you\ncan run:</p>\n<pre><code class="lang-bash">$ sudo npm update sails -g</code></pre>\n<p>To test that the global version of Sails has been updated run:</p>\n<pre><code class="lang-base">$ sails -v</code></pre>\n<p>You should see: <code>info: v0.9.0</code> to ensure it was updated correctly.</p>\n<blockquote>\n<p><strong>Note</strong>: Make sure that if your app uses an earlier version of sails, you remove the local dependency with <code>rm -rf node_modules/sails</code>.</p>\n</blockquote>\n<h2>You&rsquo;re done!</h2>\n<p>You should now be able to call <code>sails lift</code> and start your application on the new\nversion of Sails.</p>\n<p>The next step is to read through the docs and see all the new features you can take advantage of.\nSails is now more powerful than ever and 0.9.x is a huge step on the way to a 1.0 release.</p>\n<p>We are excited to get it into developers&rsquo; hands and see all the awesome new applications they build\non top of it. We have many more new features planned for the 0.9.x branch and will continue pushing\nout features that make Sails the best framework for building Node.js apps on.</p>\n<p>A final shoutout and thanks to all of the contributors that have helped shape 0.9.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/README.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs README">\n<h1>Sails.js v0.9 Reference Documentation</h1>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/What-Is-Sails.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs What-Is-Sails">\n<h1>What is Sails?</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Sails makes it easy to build custom, enterprise-grade Node.js apps. It is designed to resemble the MVC architecture from frameworks like Ruby on Rails, but with support for the more modern, data-oriented style of web app development.\nYou can do all the things you&#39;re used to with MVC frameworks like CakePHP, Grails, Symfony, etc., but Sails is especially good for building APIs, single page apps/sites, and realtime features like chat.</p>\n<h2>The MVC Architecture</h2>\n<p>Sails is a Model, View, Controller (MVC) architecture for Node.js. You can learn more about MVC <a href="https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names">here</a>, <a href="http://symfony.com/legacy/doc/askeet/1_0/en/3">here</a>, and <a href="http://guides.rubyonrails.org/getting_started.html#the-mvc-architecture">here</a>, but the tl;dr is that it&#39;s the really awesome, industry-standard way of doing things for modern web apps.\nIf you&#39;re wondering if Sails is a &quot;proper MVC&quot;, you&#39;re probably right! It wasn’t made to mimic Django, Zend, or Rails; it was made to resemble the MVC architecture we’re used to while still unlocking the features necessary to easily leverage WebSockets, streams, and data-driven APIs.</p>\n<h2>With a Modern Twist</h2>\n<p>Sails does a few things other MVC frameworks can&#39;t do:</p>\n<h3>Socket.io / Realtime / WebSockets</h3>\n<p>Sails supports transport agnostic routing, which allows your controllers/policies to automatically handle Socket.io / WebSocket messages.  In the past, you&#39;d have to maintain a separate code base to make that happen. This makes it much easier to add pubsub features, in particular the server-originated or &#39;comet&#39; notifications you need for realtime apps, realtime analytics dashboards, and multiplayer games.</p>\n<h3>Performance</h3>\n<p>Node has fantastic performance. Specifically, we&#39;ve had some great results using 4 EC2 small servers to scale Sails to 10,000 concurrent connections.</p>\n<ul>\n<li>Built-in support for Redis session store, and Redis MQ for reverse pubsub routing</li>\n</ul>\n<h3>Node.js</h3>\n<p>Node.js is the fastest-growing, all-javascript solution to <a href="https://www.youtube.com/watch?v=jo_B4LTHi3I">server-side development</a>. Writing your code in one language on the front-end and back-end means less context-shifting, faster development, and better apps.</p>\n<h3>Express</h3>\n<p>Sails&#39;s controllers and policies are really just <a href="http://expressjs.com/">Express</a> middleware. This means your Sails app logic is interoperable with existing Express apps, and vice versa</p>\n<ul>\n<li>Supports the existing ecosystem of Express middleware</li>\n</ul>\n<h3>REST Blueprints</h3>\n<ul>\n<li>Automatically generated JSON API for manipulating models (You don&#39;t have to write any backend code to build simple CRUD apps)</li>\n<li>Automatic route bindings for your controller actions</li>\n</ul>\n<h3>Built-in support for controller/action-level middleware mappings of:</h3>\n<ul>\n<li>Authentication logic</li>\n<li>Role-based access control</li>\n<li>Custom policies (e.g. file storage quotas)</li>\n</ul>\n<h2>Convenience features for front-end developers</h2>\n<p>If you are developing an HTML/CSS front-end powered by Sails, there are some other convenience features we&#39;ve included that might help you out.</p>\n<h3>Support for Grunt</h3>\n<p>As of Sails v0.9, all new projects come with a Gruntfile. Grunt is to Node.js as mvn/ant is to Java, or as rake is to Ruby. It has a strong, supportive community, and a wide array of plugins and build tools. Adding support for your favorite template engine or css/js preprocessor is as easy as modifying your project&#39;s Gruntfile</p>\n<h3>Asset bundling</h3>\n<p>Sails bundles support for LESS and JST templates\n  + If you use the <code>--linker</code> option when creating your new project, your assets will be automatically bundled up and included in your layout HTML\n  + Front-end support for SASS, Handlebars, CoffeeScript, Stylus, TypeScript, etc. is as easy as modifying your app&#39;s Gruntfile\n  + In production mode, Sails will also minify and concatenate your assets\n  + If you need to take web performance even further (this comes up for mobile web apps in particular), you can run <code>sails build</code> to output a CDN-ready snapshot of your apps assets    </p>\n<h3>PhoneGap, Chrome extensions, and SPA-friendliness</h3>\n<ul>\n<li><code>sails build</code> spits out a ready-to-deploy <code>www</code> directory for use in all of the sorts of places where you need indepenedent, API-driven front-end code</li>\n<li>Sails has easy-to-use CORS integration</li>\n<li>Built-in support for cross-site request forgery (CSRF) protection, with a handy token-based option for single-page apps</li>\n</ul>\n<h2>Finally, a note for UX-focused guys/gals</h2>\n<blockquote>\n<h4>From one geek to another:</h4>\n<p>I work on a lot of web and mobile apps with our team at <a href="http://balderdash.co">Balderdash</a>.  More than ever before, it&#39;s important that your applications not only work, but look and feel awesome.\nI originally built Sails to tackle these sorts of API-driven, front-end heavy projects for our startup and enterprise clients.  Since then, top-notch experiences have become industry standard (typically using Backbone, Angular, Ember, Knockout, etc.)\nReducing the amount of time and energy you spend on your app&#39;s server code allows you to spend more time focusing on cool features.  The easier your backend code is to write and maintain, the more nimble you can be.  The more nimble you are, the more adaptable your project can be to your users&#39; needs, and the faster you respond to bug fixes.  The more adaptable you are... you get the idea!</p>\n</blockquote>\n<p><a href="http://githalytics.com/balderdashy/sails/wiki/what_is_sails"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/asset-management.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs asset-management">\n<h1>Asset Management</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Sails uses a very powerful tool called <a href="https://github.com/gruntjs/grunt">Grunt</a> to manage assets.  </p>\n<h2>What is Grunt?</h2>\n<p>Grunt is a javascript task manager that has a fast growing ecosystem of plugins that help automate any task that you could think of. Why did we decide to use this task runner to manage assets? From Grunt&#39;s very own <a href="http://gruntjs.com/">website</a>.</p>\n<p><em>In one word: automation. The less work you have to do when performing repetitive tasks like minification, compilation, unit testing, linting, etc, the easier your job becomes. After you&#39;ve configured it, a task runner can do most of that mundane work for you—and your team—with basically zero effort.</em></p>\n<p>With that in mind, Grunt not only allows you to manage assets very easily, but most of the code to do this is already written and accessable through grunt plugins. Just find a plugin you need, configure the task, and Grunt takes care of the rest.</p>\n<p>If you&#39;d like a more comprehensive understanding of Grunt, <a href="http://gruntjs.com/getting-started">here</a> is a good place to start.</p>\n<h2>Default Asset Management with Grunt</h2>\n<p>Here is what the default grunt file does:</p>\n<ul>\n<li>clears the .tmp folder created the last time the app was run. Your .tmp folder is the public facing directory of your web application.</li>\n<li>compiles JST templates from assets/linker</li>\n<li>compiles Less styles</li>\n<li>copies assets into a .tmp/public folder (this is where static files are served from)</li>\n<li>runs secret injector code<ul>\n<li>automatically injects assets into dev files. See <a href="#!documentation/asset-management">Assets Documentation</a> for more details</li>\n</ul>\n</li>\n<li>watches for changes to your files</li>\n</ul>\n<!-- TODO production enviroment default asset management -->\n\n<h2>Configuring a Grunt Task</h2>\n<p>To customize your own Grunt task, you must first ensure that the Grunt plugin you are going to use is installed. You can install it from your terminal. If you wanted to use Grunt&#39;s Handlebars plugin you could do this:</p>\n<pre><code class="lang-bash">  npm install --save-dev grunt-contrib-handlebars</code></pre>\n<p>We can then configure the plugin options, load the task, and include it in a registered Grunt task. Here is a snippet of code for these steps:</p>\n<pre><code class="lang-javascript">module.exports = function(grunt) {\n  ...\n\n  // configure the handlebars task\n  handlebars: {\n    dev: {\n      options : {\n        namespace: &quot;JST&quot;\n      },\n      files: {\n        &quot;path/to/results.js&quot;: &quot;path/to/source.hbs&quot;,\n        &quot;path/to/another.js&quot;: [&quot;path/to/sources/*.hbs&quot;, &quot;path/to/more/*.hbs&quot;]\n      }\n    }\n  }\n\n  // load the handlebars plugin\n  grunt.loadTasks(&#39;grunt-contrib-handlebars&#39;);\n\n  // A simple default task that runs the handlebars task\n  grunt.registerTask(&#39;default&#39;, [\n    &#39;handlebars:dev&#39;\n  ]);\n\n  ...\n}</code></pre>\n<p><a href="http://gruntjs.com/sample-gruntfile">Here</a> is a very well documented example of a full Gruntfile.</p>\n<!-- TODO: sails build docs -->\n<!--\n\n## Building Assets for CDN/Phonegap\nSails allows you to build your assets in a way that can be used with CDN\'s or Phonegap.  Simply setup your assets like you would for launching the site in production mode.  Then run the following command from your projects root folder.\n\n```bash\nsails build \n```\n\nThis will output all the files needed to host your app on a CDN or use it with phonegap into ```/build/``` directory.\n  -->\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/assets.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs assets">\n<h1>Assets</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Assets refer to anything (js, css, html, images, etc) that needs to be accessible to the outside world. \nThe <code>assets</code> folder is where all of your assets will go, and will be served as static assets. \nIf you have experience with <a href="http://www.expressjs.com">Express</a>, it is equivalent to the <code>public</code> folder (the same as in Sails 0.8.x).  </p>\n<p>However, Sails does do a few extra things to help you out:\n - Automatic LESS compilation\n - Automatic JST compilation\n - Optional automatic asset injection, minification, and concatenation</p>\n<p>In order to take advantage of asset injection, minification, and concatenation you must put your assets in folder under \n<code>assets/linker</code>. Any asset you put in <code>linker</code> will be automatically injected based on special flags in your views.</p>\n<pre><code class="lang-html">&lt;!--SCRIPTS--&gt;\nAll .js files in assets/linker/js will be included here\nIn production mode, they will all be concatenated and minified\n&lt;!--SCRIPTS END--&gt;\n\n&lt;!--STYLES--&gt;\nAll .css files in assets/linker/styles (including automatically compile ones from LESS) will be included here\nIn production mode, they will all be concatenated and minified\n&lt;!--STYLES END--&gt;\n\n&lt;!--TEMPLATES--&gt;\nAll *.html files will be compiled as JST templates and included here.\n&lt;!--TEMPLATES END--&gt;</code></pre>\n<p>Jade templates are also supported</p>\n<pre><code class="lang-jade">// SCRIPTS\n// SCRIPTS END\n\n// STYLES\n// STYLES END\n\n// TEMPLATES\n// TEMPLATES END</code></pre>\n<p>If you did not create an application with the <code>--linker</code> option, you will need to create the following file structure\nand also add the special flags metioned above into the desired views:</p>\n<pre><code>assets/\n  linker/\n    js/\n    styles/\n    templates/</code></pre>\n<p>Since the order of styles and scripts is important, you can change the order of injection by opening your\n<code>Gruntfile.js</code> file. You will see three arrays at the top of the file where you can use Grunt-style\nwildcard/glob/splat expressions to order your assets.</p>\n<p>Here is an example:</p>\n<pre><code class="lang-javascript">module.exports = function (grunt) {\n\n &#39;use strict&#39;;\n\n ...\n\n  var jsFilesToInject = [\n    // Need this order for these libraries to work correctly\n    &#39;linker/js/vendor/jquery.js&#39;,\n    &#39;linker/js/vendor/underscore.js&#39;,\n    &#39;linker/js/vendor/backbone.js&#39;,\n\n    // Inject all of js assests after\n    &#39;linker/**/*.js&#39;\n  ];\n\n ...\n\n}</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/changelog.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs changelog">\n<h1>Changelog</h1>\n<h2>0.9.4  (latest stable)</h2>\n<p><em>September 5, 2013</em></p>\n<ul>\n<li>Improved csrf prevention support (thanks to @sgress454)</li>\n<li>Support for CORS (thanks to @sgress454)</li>\n<li>CoffeeScript supported client-side by default in gruntfile thanks to @reecelewellen</li>\n<li>Improves/fixes internationalization (thanks to @xdissent and @silvinci)</li>\n<li>All tests pass (thanks to @sgress454)</li>\n<li>Improvements, fixes to built-in pubsub / socket behaviors (thanks to @xdissent and @irlnathan)</li>\n<li>Removed vanilla HAML support and tests since it was incomplete (jade is still supported)</li>\n<li>Other minor bug fixes/inconsistencies and documentation enhancements</li>\n</ul>\n<blockquote>\n<p>And thanks a ton to anybody I left out!  Send me a message on twitter and I&#39;ll add you.</p>\n</blockquote>\n<!--\n## 0.9.3\n## 0.9.2\n## 0.9.1\n-->\n\n\n<h2>0.9.0</h2>\n<p><em>July 10, 2013</em></p>\n<h3>Sails.JS</h3>\n<ul>\n<li>Main: Express 3.x has been integrated.</li>\n<li>Main: CSRF Attack Protection was added as part of the core.  Uses express-csrf, plus a token-based approach for SPAs and embedded apps (Chrome extensions, javascript plugins).</li>\n<li>Main: Most of the core has been refactored for performance, code clarity, and simplicity to make contributions easier.</li>\n<li>Main: Most of the core has been pulled into hooks.  In a subsequent patch release for 0.9.x, this process will make Socket.io optional.</li>\n<li>Controllers: Automatic routing is now disable-able.</li>\n<li>Assets: Grunt integration replaces Asset Rack.</li>\n<li>Assets: Public folder removed from new projects.</li>\n<li>Assets: Temporary &#39;public&#39; folder is automatically built on lift, using the contents of the assets folder.</li>\n<li>Assets: Static assets can be compiled with &quot;sails build&quot; for external hosting of front-end assets</li>\n<li>Assets: Grunt ecosystem allows for a <a href="https://github.com/gruntjs/grunt-contrib">wide variety</a> of front-end template/css/js preprocessor support (sass, hbs, stylus, dust, typescript, etc.)</li>\n<li>Routing: Automatic 404 and 500 routing is replaced.</li>\n<li>Assets: Asset bundling is now disabled by default, use <code>sails new foo --linker</code> to enable it</li>\n<li>Config: Most configuration is now also explicit in new projects.  Defaults are still provided underneath.</li>\n<li>Sockets: Socket.IO can now be configured with the options detailed in config/io.js.</li>\n<li>Sockets: Built-in support for Redis MQ-- allows you to scale realtime apps to a multi-instance deployment without necessitating sticky sessions at your load balancer.</li>\n<li>Views: Express 3 killed support for layouts/view partials.  Sails has been extended to maintain support for them with ejs and jade, but otherwise you are limited to what is supported by the engine itself.</li>\n<li>Views: Automatic routing to views is now disable-able.</li>\n<li>Sessions: Built-in support for Redis and Mongo sessions for scaling your app to multi-instance deployments.</li>\n</ul>\n<h3>Waterline</h3>\n<ul>\n<li>ORM: Waterline has been pulled out of Sails.js... Again. (See <a href="http://www.github.com/balderdashy/waterline">Waterline</a>)</li>\n<li>ORM: Model attributes now support validations. (See <a href="http://www.github.com/balderdashy/anchor">Anchor</a>)</li>\n<li>ORM: Custom instance methods can now be defined on models as virtual attributes.</li>\n<li>ORM: Lifecycle Callbacks have been added. (See <a href="">Lifecycle Callbacks</a>)</li>\n<li>ORM: findAll() has been replaced with find().</li>\n<li>ORM: find() has been replaced with findOne().</li>\n<li>ORM: .done() promise now works on all ORM methods</li>\n<li>ORM: Complete support for the Promise specificiation has been added.</li>\n</ul>\n<h3>Anchor</h3>\n<ul>\n<li>Validations:  Too many added to list, see <a href="">Validations</a></li>\n</ul>\n<h2>0.8.9</h2>\n<p><em>April 9, 2013</em></p>\n<ul>\n<li>Controllers must now also be generated to use the default API (they can be empty)</li>\n<li>Haml template support on back-end for new projects (thanks @dcbartlett)</li>\n<li>default values in models (defaultsTo)</li>\n<li>Chained policies fixed</li>\n<li>Removed all reference to blueprints as &quot;scaffolds&quot;.  Blueprints are more than temporary placeholders-- they are the preferred method of serving an API from your app.</li>\n<li>Refactored most of the code base</li>\n<li>Removed CRUD synonyms</li>\n<li>Main: Compatibility with Node v0.10.0 (patches node-dirty)</li>\n<li>Main: Fixed crash that happened when absolute path was given as appPath</li>\n<li>Assets: Added more logging features for less.</li>\n<li>Assets: Reset.css now in mixins</li>\n<li>Assets: Less assets are deligated to <em>Rack.LessAsset</em></li>\n<li>Assets: Less assets served from asset-rack will have their extensions changed to css</li>\n<li>Policies: Implemented the controller syntax for defining a policy.</li>\n<li>Naming: <em>scaffolds</em> is now known as <em>blueprints</em></li>\n<li>Naming: <em>blueprints</em> is now known as <em>boilerplates</em></li>\n<li>Routing: Added <em>controller.action</em> syntax</li>\n<li>Routing: Removed CRUD Synonyms-- now you must explicitly use find, findAll, create, destroy, update  (cant use <code>get</code>,<code>detail</code>, <code>delete</code>, <code>edit</code>, etc. to indicate the same thing.  Turns out this was actually annoying, not helpful)</li>\n<li>Routing: Fix in API blueprint for regression around PUT/DELETE automatic RESTful routes</li>\n<li>Routing: Fix for resourceful routing.  /model/[id] didn&#39;t work with verbs.  Does now.</li>\n<li>Config: <em> and async no longer have to be global (but they are by default) They are configurable with `sails.config.globals.</em><code>and</code>sails.config.globals.async` (thanks @particlebanana!)</li>\n<li>New sails project can now be created in the current dir with <code>sails new .</code> (thanks @collinwren!)</li>\n<li>More tests (thanks @collinwren and @benrudolph)</li>\n<li>Travis CI integration (thanks @collinwren!)</li>\n</ul>\n<h2>0.8.895</h2>\n<ul>\n<li>Policies: Fixed the &quot;*&quot; route for controllers.</li>\n<li>Policies: The &quot;*&quot; policy can now be set to <em>false</em></li>\n<li>Collections: Type restrictions are cleaner</li>\n<li>Adapters: Default was changed to memory due to an issue with node-dirty</li>\n<li>Log: <em>sails.config.log.level</em> is passed to socket.io</li>\n<li>Assets: Bug fixed: not calling next when compiling less with syntax (thanks vicapow)</li>\n<li>Assets: Typescript supported on front end (thanks Diullei)</li>\n<li>Assets: Meaningful less errors were added (thanks vicapow)</li>\n</ul>\n<h2>0.8.892</h2>\n<ul>\n<li>Front-end CoffeeScript support in AssetRack (thanks @techpines!)</li>\n<li>Chained policy support</li>\n<li>New styles for default home page (thanks @egdelwonk!)</li>\n<li>Windows compat. fix (thanks @feroc1ty!)</li>\n<li>Support for string IDs (thanks @tedkulp!)</li>\n<li>Attribute scaffolding for model generation (thanks @Tidwell)</li>\n<li>Support for big int string conversion in id normalization (thanks @d4mn!)</li>\n</ul>\n<h2>0.8.88</h2>\n<ul>\n<li>Adds coffeescript support on the front-end in dev and production environments via <a href="https://github.com/techpines/asset-rack">asset-rack</a> (thanks @techpines!)</li>\n</ul>\n<h2>0.8.87</h2>\n<p><em>Monday, March 4, 2013</em>\n+ Patch fixes updates sails-dirty version which fixes sorting by date</p>\n<h2>0.8.86</h2>\n<p><em>Monday, March 4, 2013</em>\n+ Patch to allow for easier SSL configuration.</p>\n<h2>0.8.85</h2>\n<p><em>Sunday, March 3, 2013</em>\n+ Check for and warn if port is currently being used on lift, with support for explicit hosts (<a href="https://github.com/balderdashy/sails/issues/197">https://github.com/balderdashy/sails/issues/197</a>)\n+ Model.stream() support over socket.io (<a href="https://github.com/balderdashy/sails/issues/196">https://github.com/balderdashy/sails/issues/196</a>)</p>\n<h2>0.8.84</h2>\n<p><em>Saturday, March 2, 2013</em>\n+ Bug fixes: (explicit hosts, and included an additional file in new app generation)</p>\n<h2>0.8.83</h2>\n<p><em>Saturday, March 2, 2013</em>\n+ Support for streaming large datasets from models (e.g. <code>User.stream().pipe(res);</code>)\n+ Bug fix for chains of multiple policies (thanks @themouette)\n+ Jade template support (thanks @valinorsgatekeeper)\n+ AssetRack integration for more robust css/js/template/LESS management, replaces Rigging (thanks @techpines)\n+ Fixed some docs /refactored (thanks @slantzjr)\n+ Bundled excruciatingly simple &quot;authenticated&quot; policy in new projects\n+ Made &quot;redirect&quot; work in API scaffolds\n+ Renamed waterline-<em> adapter modules as sails-</em>.  Added backwards compat.\n+ Added .gitkeep in all directories when generating new projects to make sure they get committed\n+ Bootstrap and log config now available in project template\n+ View config now available in new projects as &#39;config/views.js&#39;\n+ Better error checking in the <code>sails</code> CLI\n+ Docs\n+ Added app.js file back in, but this time hidden as &#39;.app.js&#39;.  It can be run however you like, or you can use <code>npm debug</code> to debug it.  To run daemonized, you can use <code>forever start .app.js</code>\n+ Added notion of <code>sails.explicitHost</code> to track whether a host was explicitly specified.  If it was not, Express takes the approach of accepting <code>all connections via INADDR_ANY</code> (see <a href="http://expressjs.com/2x/guide.html#app.listen(">http://expressjs.com/2x/guide.html#app.listen(</a>))  Now, if you specify <code>sails.config.host</code>, <code>sails.explicitHost</code> gets set, and Express will start the server deliberately using the host you specify.  In certain PaaS deployments, this is required.  For instance, this was causing problems in an Openshift deployment environment (big thanks to @hypereive for figuring that out).</p>\n<h2>0.8.82</h2>\n<p><em>Sunday, February 24, 2013</em>\n+ Bootstrap function fires warning if callback not triggered after a few seconds (thanks @virpool)\n+ Bug fixes w/ pubsub/model convenience methods.</p>\n<h2>0.8.80</h2>\n<ul>\n<li>Refactored app layout to make it a bit more straightforward.  To check out the the new folder structure, make a new project with <code>sails new foo</code></li>\n<li>Added robot.txt in new app generation</li>\n<li>Bound all methods in adapter to have the right context.</li>\n</ul>\n<h2>0.8.79</h2>\n<ul>\n<li>Adapter definitions are no longer functions-- instead the direct definition object is accepted.  This makes it easier, cleaner, and more declarative to create adapters.</li>\n<li>Merged waterline into main Sails repo.</li>\n<li>Brought in sails-util and sails-moduleloader, moved watelrine tests into top level.</li>\n<li>Attribute values in models in result sets from Waterline are now cast to numbers, if they are number-looking strings.</li>\n<li>Substantial refactoring of waterline model-augmentation logic.</li>\n<li>Added TODO for asynchronous module loading for future.</li>\n<li>Upgraded waterline-dirty dep.</li>\n</ul>\n<h2>0.8.77</h2>\n<ul>\n<li>Patch updates the waterline-dirty dependency to deal with an issue with that adapter returning objects which map directly to the in-memory database (was causing changes made to found models to be persisted without calling .save())</li>\n</ul>\n<h2>&lt; 0.8.77</h2>\n<ul>\n<li>I wasn&#39;t keeping good notes, sorry :(</li>\n<li>Check out <a href="https://github.com/balderdashy/sails/commits/master">https://github.com/balderdashy/sails/commits/master</a> if you want to dive in.</li>\n</ul>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.404.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.404">\n<h1>404.js</h1>\n<p>This is the default 404 (not found) handler.</p>\n<p>If a request is made that has no matching <a href="#!documentation/routes">routes</a>, Sails will respond using this handler:</p>\n<pre><code class="lang-javascript">module.exports[404] = function pageNotFound(req, res, defaultNotFoundBehavior) {\n\n  // If the user-agent wants a JSON response,\n  // the views hook is disabled,\n  // or the 404 view doesn&#39;t exist,\n  // send JSON\n  if (req.wantsJSON || !sails.config.hooks.views || !res.view || !sails.hooks.views.middleware[404]) {\n    return res.json({\n      status: 404\n    }, 404);\n  }\n\n  // Otherwise, serve the `views/404.*` page\n  res.view(&#39;404&#39;);\n\n};</code></pre>\n<p>For more information on 404/notfound handling in Sails/Express, check out: <a href="http://expressjs.com/faq.html#404-handling">http://expressjs.com/faq.html#404-handling</a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.500.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.500">\n<h1>500.js</h1>\n<p>If an error is thrown, Sails will respond using this default error handler:</p>\n<pre><code class="lang-javascript">\nmodule.exports[500] = function serverErrorOccurred(errors, req, res, defaultErrorBehavior) {\n\n  // Ensure that `errors` is a list\n  var displayedErrors = (typeof errors !== &#39;object&#39; || !errors.length) ? [errors] : errors;\n\n  // Ensure that each error is formatted correctly\n  // Then log them\n  for (var i in displayedErrors) {\n    if (!(displayedErrors[i] instanceof Error)) {\n      displayedErrors[i] = new Error(displayedErrors[i]);\n    }\n    sails.log.error(displayedErrors[i]);\n  }\n\n  // In production, don&#39;t display any identifying information about the error(s)\n  var response = {};\n  if (sails.config.environment === &#39;development&#39;) {\n    response = {\n      status: 500,\n      errors: displayedErrors\n    };\n  }\n\n  // If the user-agent wants a JSON response,\n  // the views hook is disabled,\n  // or the 500 view doesn&#39;t exist,\n  // send JSON\n  if (req.wantsJSON || !sails.config.hooks.views || !res.view || !sails.hooks.views.middleware[500]) {\n\n    // Create JSON-readable version of errors\n    for (var j in response.errors) {\n      response.errors[j] = {\n        error: response.errors[j].message\n      };\n    }\n\n    return res.json(response, 500);\n  }\n\n\n  // Otherwise\n  // create HTML-readable stacks for errors\n  for (var k in response.errors) {\n    response.errors[k] = response.errors[k].stack;\n  }\n  // and send the `views/500.*` page\n  res.view(&#39;500&#39;, response);\n\n};</code></pre>\n<p>For more information on error handling in Sails/Express, check out: <a href="http://expressjs.com/guide.html#error-handling">http://expressjs.com/guide.html#error-handling</a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.adapters.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.adapters">\n<h1>Global adapter config</h1>\n<p>The <code>adapters</code> configuration object lets you create different global &ldquo;saved settings&rdquo; that you can mix and match in your models.  The <code>default</code> option indicates which saved setting should be used if a model doesn&#39;t have an adapter specified.</p>\n<p>Keep in mind that options you define directly in your model definitions will override these settings.</p>\n<p>For example, to use the in-memory adapter (for DEVELOPMENT ONLY), first install the module with <code>npm install sails-memory</code>, then define it in <code>adapters.js</code>:</p>\n<pre><code class="lang-javascript">  memory: {\n    module: &#39;sails-memory&#39;\n  },</code></pre>\n<p>then in your model definition, add <code>adapter: &#39;memory&#39;</code>:</p>\n<pre><code class="lang-javascript">  module.exports = {\n     adapter: &#39;memory&#39;,\n     attributes: {\n       // some attributes\n     }\n  }</code></pre>\n<p>Sails adapters have been written for a variety of popular databases such as MySQL, Postgres and Mongo.  You can find a list of supported adapters <a href="#!documentation/Database-Support">here</a>.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.bootstrap.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.bootstrap">\n<h1>Bootstrap</h1>\n<p>This is an asynchronous boostrap function that runs before your Sails app gets lifted (i.e. starts up). This gives you an opportunity to set up your data model, run jobs, or perform some special logic.</p>\n<pre><code class="lang-javascript">module.exports.bootstrap = function (cb) {\n\n  // It&#39;s very important to trigger this callback method when you are finished \n  // with the bootstrap!  (otherwise your server will never lift, since it&#39;s waiting on the bootstrap)\n  cb();\n};</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.controllers.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.controllers">\n<h1>Controllers</h1>\n<p>By default, Sails controllers automatically bind routes for each of their functions. Additionally, each controller will automatically bind routes for a CRUD API controlling the model which matches its name, if one exists.</p>\n<h2>Blueprints</h2>\n<h4><code>prefix</code> (string)</h4>\n<p>Optional mount path prefix for blueprints (the automatically bound routes in your controllers) e.g. &#39;/api/v2&#39;</p>\n<h4><code>actions</code> (boolean)</h4>\n<p>Whether routes are automatically generated for every action in your controllers (also maps <code>index</code> to <code>/:controller</code>) &#39;/:controller&#39;, &#39;/:controller/index&#39;, and &#39;/:controller/:action&#39;</p>\n<h4><code>shortcuts</code> (boolean)</h4>\n<p>These CRUD shortcuts exist for your convenience during development, but you&#39;ll want to disable them in production.: <code>&#39;/:controller/find/:id?&#39;</code>, <code>&#39;/:controller/create&#39;</code>, <code>&#39;/:controller/update/:id&#39;</code>, and <code>&#39;/:controller/destroy/:id&#39;</code></p>\n<h4><code>rest</code> (boolean)</h4>\n<p>Automatic REST blueprints enabled? e.g. <code>&#39;get /:controller/:id?&#39;</code> <code>&#39;post /:controller&#39;</code> <code>&#39;put /:controller/:id&#39;</code> <code>&#39;delete /:controller/:id&#39;</code></p>\n<h4><code>expectIntegerId</code> (boolean)</h4>\n<p>If a blueprint route catches a request, only match :id param if it&#39;s an integer.  e.g. only trigger route handler if requests look like: <code>get /user/8</code> instead of: <code>get /user/a8j4g9jsd9ga4ghjasdha</code>.  You&rsquo;ll usually want to change this to <code>false</code> when using a database that uses strings for unique IDs, such as Mongo.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.csrf.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.csrf">\n<h1>Cross-Site Request Forgery Protection</h1>\n<p> When enabled, all non-GET requests to the Sails server must be accompanied by a special token, identified as the &#39;_csrf&#39; parameter.</p>\n<p>This option protects your Sails app against cross-site request forgery (or CSRF) attacks. A would-be attacker needs not only a user&#39;s session cookie, but also this timestamped, secret CSRF token, which is refreshed/granted when the user visits a URL on your app&#39;s domain.</p>\n<p>This allows you to have certainty that your users&#39; requests haven&#39;t been hijacked, and that the requests they&#39;re making are intentional and legitimate.</p>\n<p>This token has a short-lived expiration timeline, and must be acquired by either:</p>\n<h3><em>For traditional view-driven web apps:</em></h3>\n<p>Fetching it from one of your views, where it may be accessed as a local variable, i.e.: <code>&lt;%= _csrf %&gt;</code>\ne.g.:</p>\n<pre><code class="lang-html">&lt;form&gt;\n &lt;input type=&#39;hidden&#39; name=&#39;_csrf&#39; value=&#39;&lt;%= _csrf %&gt;&#39;&gt;\n&lt;/form&gt;</code></pre>\n<h4><em>or</em></h4>\n<h3><em>For AJAX/Socket-heavy and/or single-page apps:</em></h3>\n<p>Sending a GET request to the <code>/csrfToken</code> route, where it will be returned as JSON, e.g.: <code>{ _csrf: &#39;ajg4JD(JGdajhLJALHDa&#39; }</code></p>\n<p>Enabling this option requires managing the token in your front-end app. For traditional web apps, it&#39;s as easy as passing the data from a view into a form action. In AJAX/Socket-heavy apps, just send a GET request to the /csrfToken route to get a valid token.</p>\n<h5>For more information on CSRF, check out: <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">this</a> article.</h5>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config">\n<h1>Config</h1>\n<h3>Contents:</h3>\n<h4><a href="#!documentation/config.404">404</a></h4>\n<blockquote>\n<p>The default 404 handler.</p>\n</blockquote>\n<h4><a href="#!documentation/config.500">500</a></h4>\n<blockquote>\n<p>The default 500 error handler.</p>\n</blockquote>\n<h4><a href="#!documentation/config.adapters">Adapters</a></h4>\n<blockquote>\n<p>The adapters configuration object lets you create different global “saved settings” that you can mix and match in your models. </p>\n</blockquote>\n<h4><a href="#!documentation/config.bootstrap">Bootstrap</a></h4>\n<blockquote>\n<p>This is an asynchronous boostrap function that runs before your Sails app gets lifted (i.e. starts up). This gives you an opportunity to set up your data model, run jobs, or perform some special logic.</p>\n</blockquote>\n<h4><a href="#!documentation/config.controllers">Controllers</a></h4>\n<blockquote>\n<p>By default, Sails controllers automatically bind routes for each of their functions. Additionally, each controller will automatically bind routes for a CRUD API controlling the model which matches its name, if one exists.</p>\n</blockquote>\n<h4><a href="#!documentation/config.csrf">CSRF</a></h4>\n<blockquote>\n<p>When enabled, all non-GET requests to the Sails server must be accompanied by a special token, identified as the &#39;_csrf&#39; parameter.</p>\n</blockquote>\n<h4><a href="#!documentation/config.local">Local</a></h4>\n<blockquote>\n<p>While you’re developing your app, this config file should include any settings specifically for your development computer (db passwords, etc.)</p>\n</blockquote>\n<h4><a href="#!documentation/config.locales">Locales</a></h4>\n<blockquote>\n<p>This is a folder that contains the Language files for different locales.</p>\n</blockquote>\n<h4><a href="#!documentation/config.log">Log</a></h4>\n<blockquote>\n<p>The logger file configures the log level for your app, as well as the transport.</p>\n</blockquote>\n<h4><a href="#!documentation/config.policies">Policies</a></h4>\n<blockquote>\n<p>Policies are like any other system for authentication control. You can allow or deny access in fine granularity with policies.</p>\n</blockquote>\n<h4><a href="#!documentation/config.routes">Routes</a></h4>\n<blockquote>\n<p>Sails uses a number of different strategies to route requests. This section lists them top-to-bottom, in order of precedence.</p>\n</blockquote>\n<h4><a href="#!documentation/config.session">Session</a></h4>\n<blockquote>\n<p>Sails session integration leans heavily on the great work already done by Express, but also unifies Socket.io with the Connect session store.</p>\n</blockquote>\n<h4><a href="#!documentation/config.sockets">Sockets</a></h4>\n<blockquote>\n<p>These configuration options provide transparent access to Sails’ encapsulated pubsub/socket server for complete customizability.</p>\n</blockquote>\n<h4><a href="#!documentation/config.views">Views</a></h4>\n<blockquote>\n<p>Server-sent views are a classic and effective way to get your app up and running. Views are normally served from controllers, but by default, Sails also exposes routes to allow you to preview your viewsn in a browser.</p>\n</blockquote>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.local.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.local">\n<h1>Local environment settings</h1>\n<p>While you&rsquo;re developing your app, this config file should include any settings specifically for your development computer (db passwords, etc.)\nWhen you&rsquo;re ready to deploy your app in production, you can use this file for configuration options on the server where it will be deployed.</p>\n<blockquote>\n<p><strong>Note:</strong> This file is included in your .gitignore, so if you&rsquo;re using git as a version control solution for your Sails app, keep in mind that this file won&rsquo;t be committed to your repository!</p>\n<p>Good news is, that means you can specify configuration for your local machine in this file without inadvertently committing personal information (like database passwords) to the repo.  Plus, this prevents other members of your team from commiting their local configuration changes on top of yours.</p>\n</blockquote>\n<h2>Port</h2>\n<p>The <code>port</code> setting determines which TCP port your app will be deployed on.\nPorts are a transport-layer concept designed to allow many different networking applications to run at the same time on a single computer.</p>\n<p>By default, if it&rsquo;s set, Sails uses the <code>PORT</code> environment variable. Otherwise it falls back to port 1337. In production, you&rsquo;ll probably want to change this setting to 80 (http://) or 443 (https://) if you have an SSL certificate.</p>\n<p>More about ports: <a href="http://en.wikipedia.org/wiki/Port_(computer_networking">http://en.wikipedia.org/wiki/Port_(computer_networking</a>)</p>\n<h2>Environment</h2>\n<p>The runtime &ldquo;environment&rdquo; of your Sails app is either &lsquo;development&rsquo; or &lsquo;production&rsquo;.</p>\n<p>In development, your Sails app will go out of its way to help you (for instance you will receive more descriptive error and debugging output).</p>\n<p>In production, Sails configures itself (and its dependencies) to optimize performance.\nYou should always put your app in production mode before you deploy it to a server -- This helps ensure that your Sails app remains stable, performant, and scalable.</p>\n<p>By default, Sails sets its environment using the <code>NODE_ENV</code> environment variable. If <code>NODE_ENV</code> is not set, Sails will run in the &lsquo;development&rsquo; environment.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.locales.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.locales">\n<h1>locales</h1>\n<p>This is a folder that contains the Language files for different locales.</p>\n<h2>Default stringfile</h2>\n<p> If you&#39;re building an internationalized application that needs support for multiple languages, you&#39;ll want to pull all of the static strings out of your application, then provide a translation file for each of your target languages.</p>\n<h4>Example i18n usage: e.g. <code>/views/about.ejs</code></h4>\n<pre><code class="lang-ejs">&lt;h2&gt;&lt;%= __(&#39;whatIsApp?&#39;) %&gt;&lt;/h2&gt;\n&lt;p&gt;    &lt;%=    __(&#39;appDescription&#39;) %&gt;&lt;/p&gt;</code></pre>\n<p>More about this implementation: <a href="https://github.com/mashpie/i18n-node">https://github.com/mashpie/i18n-node</a></p>\n<h2>locales.de.js</h2>\n<p>This file is provided in the folder as an example:\nNote that this is part of a campaign to rebrand our app for the German market as Bleistift Buben (or &quot;Pencil Boys&quot;)</p>\n<pre><code class="lang-javascript">module.exports = {\n\n    // Key                : Value\n    // e.g.\n\n    &#39;whatIsApp?&#39;        :    &#39;Was ist Bleistift Buben?&#39;,\n\n    appDescription        :    &#39;Bleistift Buben ist eine App für den Aufbau und die Aufrechterhaltung &#39; +\n                            &#39;Freunde, mit denen Sie Darlehen Bleistifte. Mit Funktionen wie Bleistift &#39;+\n                            &#39;Ledger, In-App-Zahlungen, und Vintage-Foto-Filter ermöglicht PP eine schöne &#39; +\n                            &#39;neue Welt der Rechenschaftspflicht für die #1, #2 UND #3 Bleistifte. &#39; +\n                            &#39;Du wirst nie verlieren einen Freund über eine verlorene Bleistift nie wieder!&#39;\n};</code></pre>\n<h2>What About i18n on the client?</h2>\n<p>The above technique works great out of the box for server-side views. But what about rich client apps?  HTML 5, SPAs, PhoneGap, Chrome Extensions and stuff? What if your HTML templates are being served from a CDN? If you are using <strong>client-side</strong> templates, you can reuse Sails&#39; i18n support to help you get your translated templates to the browser.  </p>\n<p>If you want to use Sails to internationalize your client-side templates, just put your front-end templates in a subdirectory of your app&#39;s <code>/views</code> folder.\n+ In development mode, you should retranslate and precompile your templates each time the relevant stringfile or template changes using grunt-contrib-watch, which is already installed by default in new Sails projects.\n+ In production mode, you&#39;ll want to translate and precompile all templates on lift(). In loadtime-critical scenarios (e.g. mobile web apps) you can even upload your translated, precompiled, minified templates to a CDN like Cloudfront for further performance gains.</p>\n<p>Alternatively, if you&#39;re writing a native Objective C or Android application, you may find the following resources helpful:\n+ Apple&#39;s Official i18n Docs for iOS: <a href="https://developer.apple.com/library/ios/#documentation/MacOSX/Conceptual/BPInternational/BPInternational.html">https://developer.apple.com/library/ios/#documentation/MacOSX/Conceptual/BPInternational/BPInternational.html</a>\n+ Google&#39;s Official i18n Docs for Android: <a href="http://developer.android.com/guide/topics/resources/localization.html">http://developer.android.com/guide/topics/resources/localization.html</a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.log.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.log">\n<h1>Logger configuration</h1>\n<p>The logger file configures the log level for your app, as well as the transport.</p>\n<p><em>(Underneath the covers, Sails uses Winston for logging, which allows for some pretty neat custom transports/adapters for log messages)</em></p>\n<h2>There are 5 different levels to the log:</h2>\n<ul>\n<li><strong>&#39;error&#39;</strong> : Display calls to <code>.error()</code></li>\n<li><strong>&#39;warn&#39;</strong>    : Display calls from <code>.error()</code> to <code>.warn()</code></li>\n<li><strong>&#39;debug&#39;</strong>    : Display calls from <code>.error()</code>, <code>.warn()</code> to <code>.debug()</code></li>\n<li><strong>&#39;info&#39;</strong>    : Display calls from <code>.error()</code>, <code>.warn()</code>, <code>.debug()</code> to <code>.info()</code></li>\n<li><strong>&#39;verbose&#39;</strong>: Display calls from <code>.error()</code>, <code>.warn()</code>, <code>.debug()</code>, <code>.info()</code> to <code>.verbose()</code></li>\n</ul>\n<p>By default, the level is set to <code>info</code>.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.policies.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.policies">\n<h1>Policy Mapping (ACL) Configuration</h1>\n<blockquote>\n<p><em><em>Note:</em> These docs are now for version 0.9.0 of Sails.  Please visit <a href="http://08x.sailsjs.org">here</a> for 0.8.x documentation.</em></p>\n</blockquote>\n<p>Your app&#39;s ACL (access control list) is located in <strong>config/policies.js</strong>.</p>\n<h2>Applying a Policy</h2>\n<h3>To a Specific Action</h3>\n<p>To apply a policy to a specific action in particular, you should specify it on the right-hand side of that action:</p>\n<pre><code class="lang-javascript">{\n  ProfileController: {\n      edit: &#39;isLoggedIn&#39;\n  }\n}</code></pre>\n<h3>To an Entire Controller</h3>\n<p>To set the default policy mapping for a controller, use the <code>*</code> notation:</p>\n<blockquote>\n<p><strong>Note:</strong> Default policy mappings do not &quot;cascade&quot; or &quot;trickle down.&quot;  Specified mappings for the controller&#39;s actions will override the default mapping.  In this example, <code>isLoggedIn</code> is overriding <code>false</code>.</p>\n</blockquote>\n<pre><code class="lang-javascript">{\n  ProfileController: {\n    &#39;*&#39;: false,\n    edit: &#39;isLoggedIn&#39;\n  }\n}</code></pre>\n<h3>Globally</h3>\n<blockquote>\n<p><strong>Note:</strong> Global policy mappings do not &quot;cascade&quot; or &quot;trickle down&quot; either.  Specified mappings, whether they&#39;re default controller mappings or for specific actions, will <strong>ALWAYS</strong> override the global mapping.  In this example, <code>isLoggedIn</code> is overriding <code>false</code>.</p>\n</blockquote>\n<pre><code class="lang-javascript">{\n\n  // Anything you don&#39;t see here (the unmapped stuff) is publicly accessible\n  &#39;*&#39;: true,\n\n  ProfileController: {\n    &#39;*&#39;: false,\n    edit: &#39;isLoggedIn&#39;\n  }\n}</code></pre>\n<h2>Built-in policies</h2>\n<h3>true</h3>\n<blockquote>\n<p>This is the default policy mapped to all controllers and actions in a new project.  In production, it&#39;s good practice to set this to <code>false</code> to prevent access to any logic you might have inadvertently exposed.</p>\n</blockquote>\n<p>Allow public access to the mapped controller/action.  This will allow any request to get through, no matter what.</p>\n<pre><code class="lang-javascript">module.exports = {\n  UserController: {\n\n    // login should always be accessible\n    login: true\n\n  }\n}</code></pre>\n<h3>false</h3>\n<p><strong>NO</strong> access to the mapped controller/action.  No requests get through.  Period.</p>\n<pre><code class="lang-javascript">module.exports = {\n  MathController: {\n\n    // This fancy algorithm we&#39;re working on isn&#39;t done yet\n    // so we set it to false to disable it\n    someFancyAlgorithm: false\n\n  }\n}</code></pre>\n<h2>Custom policies</h2>\n<p>You can apply one or more policies to a given controller or action.  Any file in your <code>/policies</code> folder (e.g. <code>authenticated.js</code>) is referable in your ACL (<code>config/policies.js</code>) by its filename minus the extension, (e.g.  <code>&#39;authenticated&#39;</code>).</p>\n<pre><code class="lang-javascript">module.exports = {\n  FileController: {\n    upload: [&#39;isAuthenticated&#39;, &#39;canWrite&#39;, &#39;hasEnoughSpace&#39;]\n  }\n}</code></pre>\n<h2>Multiple Policies</h2>\n<p>To apply two or more policies to a given action, (order matters!) you can specify an array, each referring to a specific policy. </p>\n<pre><code class="lang-javascript">UserController: {\n    lock: [&#39;isLoggedIn&#39;, &#39;isAdmin&#39;]\n}</code></pre>\n<p>In each of the policies, the next policy in the chain will only be run if <code>next()</code>, the third argument, is called.  When and if the last policy calls <code>next()</code>, the requested controller action is run.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.routes.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.routes">\n<h1>routes.js</h1>\n<p>Sails uses a number of different strategies to route requests. Here they are top-to-bottom, in order of precedence:</p>\n<h2>1. Static Assets</h2>\n<p>Flat files in your <code>assets</code> directory- (these are sometimes referred to as &lsquo;public&rsquo;)</p>\n<p>If you have an image file at <code>/assets/images/foo.jpg</code>, it will be made available automatically via the route:  <code>/images/foo.jpg</code></p>\n<h2>2. Static Routes</h2>\n<p>This object routes static URLs to handler functions-- In most cases, these functions are actions inside of your controllers. For convenience, you can also connect routes directly to views or external URLs.</p>\n<p>By default, your root route (aka home page) points to a view located at <code>views/home/index.ejs</code>. (This would also work if you had a file at: <code>/views/home.ejs</code>)</p>\n<p>But what if you want your home page to display a signup form located at <code>views/user/signup.ejs</code>?</p>\n<pre><code class="lang-javascript">&#39;/&#39; : {\n    view : &#39;user/signup&#39;\n}</code></pre>\n<p>Let&rsquo;s say you&rsquo;re building an email client, like Gmail. You might want your home route to serve an interface using custom logic. In this scenario, you have a custom controller <code>MessageController</code> with an <code>inbox</code> action: <code>&#39;/&#39; : &#39;message.inbox&#39;</code></p>\n<p>Alternatively, you can use the more verbose syntax:</p>\n<pre><code class="lang-javascript">&#39;/&#39;: {\n    controller    : &#39;message&#39;,\n    action        : &#39;inbox&#39;\n}</code></pre>\n<p>If you decided to call your action <code>index</code> instead of <code>inbox</code>, since the <code>index</code> action is the default, you can shortcut even further to: <code>&#39;/&#39;: &#39;MessageController&#39;</code></p>\n<p>Up until now, we haven&rsquo;t specified a specific HTTP method/verb. The routes above will apply to ALL verbs! If you want to set up a route only for one in particular (GET, POST, PUT, DELETE, etc.), just specify the verb before the path. </p>\n<p>For example, if you have a <code>UserController</code> with a <code>signup</code> action, and somewhere else, you&rsquo;re serving a signup form that looks like:</p>\n<pre><code class="lang-html">&lt;form action=&quot;/signup&quot;&gt;\n    &lt;input name=&quot;username&quot; type=&quot;text&quot;/&gt;\n    &lt;input name=&quot;password&quot; type=&quot;password&quot;/&gt;\n&lt;/form&gt;</code></pre>\n<p>You could define the following route: <code>&#39;post /signup&#39;    : &#39;user.signup&#39;</code>.</p>\n<p>Finally, here&rsquo;s an example of how you would route all GET requests to the <code>/google</code> route to Google&rsquo;s website: <code>&#39;get /google&#39;    : &#39;http://google.com&#39;</code></p>\n<h2>3. Advanced Route config</h2>\n<h4>Upload Limit</h4>\n<p>By default routes are limited to <code>10mb</code> uploads, to change the upload limit set the <code>uploadLimit</code> config on your route:</p>\n<pre><code class="lang-javascript">&#39;/&#39;: {\n    ...,\n    uploadLimit: &#39;100mb&#39;\n}</code></pre>\n<p>The limit setting uses <code>express.limit()</code> internally, and supports any valid <a href="http://www.senchalabs.org/connect/limit.html">connect.limit()</a> values </p>\n<h4>CORS (Cross origin resource sharing)</h4>\n<p>Additionally, you can also enable <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> on a route:</p>\n<pre><code class="lang-javascript">&#39;/&#39;: {\n    ...,\n    cors: true\n    // cors: &#39;http://sailsjs.org, http://sailsjs.com&#39;\n}</code></pre>\n<p>If CORS is enabled on a route, the _csrf token is set to <code>null</code> to prevent accidental _csrf token exposure.</p>\n<h2>4. Action Blueprints</h2>\n<p>These routes can be disabled in <code>config/controllers.js</code> by setting: <code>module.exports.controllers.routes.actions = false</code></p>\n<p>All of your controllers&#39; actions are automatically bound to a route.  For example: If you have a controller, <code>FooController</code>:\n+ its action <code>bar</code> is accessible at <code>/foo/bar</code>\n+ its action <code>index</code> is accessible at <code>/foo/index</code>, and also <code>/foo</code></p>\n<h2>5. View Blueprints</h2>\n<p>These routes can be disabled in <code>config/controllers.js</code> by setting: <code>module.exports.views.routes = false</code></p>\n<p>If you have a view file at <code>/views/foo/bar.ejs</code>, it will be rendered and served automatically via the route:  <code>/foo/bar</code></p>\n<h2>6. Shortcut CRUD blueprints</h2>\n<p>These routes can be disabled in <code>config/controllers.js</code> by setting: <code>module.exports.controllers.routes.shortcuts = false</code></p>\n<p>If you have a model, <code>Foo</code>, and a controller, <code>FooController</code>, you can access CRUD operations for that model at:\n+ <code>/foo/find/:id?</code>    -&gt;    search lampshades using specified criteria or with id=:id\n+ <code>/foo/create</code>    -&gt;    create a lampshade using specified values<br>+ <code>/foo/update/:id</code>    -&gt;    update the lampshade with id=:id<br>+ <code>/foo/destroy/:id</code>    -&gt;    delete lampshade with id=:id</p>\n<h2>7. REST blueprints</h2>\n<p>These routes can be disabled in <code>config/controllers.js</code> by setting: <code>module.exports.controllers.routes.rest = false</code></p>\n<p>If you have a model, <code>Foo</code>, and a controller, <code>FooController</code>, you can access CRUD operations for that model at:\n+ <code>get /foo/:id?</code>    -&gt;    search lampshades using specified criteria or with id=:id\n+ <code>post /foo</code>        -&gt; create a lampshade using specified values\n+ <code>put /foo/:id</code>    -&gt;    update the lampshade with id=:id\n+ <code>delete /foo/:id</code>    -&gt;    delete lampshade with id=:id</p>\n<h2>8. Default 404 (not found) handler</h2>\n<p>Finally, if nothing else matched, the default 404 handler is triggered. See <code>config/404.js</code> to adjust your app&rsquo;s 404 logic.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.session.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.session">\n<h1>Session</h1>\n<p>Sails session integration leans heavily on the great work already done by Express, but also unifies \nSocket.io with the Connect session store. It uses Connect&rsquo;s cookie parser to normalize configuration\ndifferences between Express and Socket.io and hooks into Sails&rsquo; middleware interpreter to allow you\nto access and auto-save to <code>req.session</code> with Socket.io the same way you would with Express.</p>\n<p>For more information on configuring the session, check out:\n<a href="http://sailsjs.org/#!documentation">http://sailsjs.org/#!documentation</a></p>\n<h2><code>secret</code></h2>\n<p>Session secret is automatically generated when your new app is created.\nReplace at your own risk in production-- you will invalidate the cookies of your users, forcing them to log in again. </p>\n<h2>Shared Redis session store</h2>\n<p>In production, uncomment the following line to set up a shared redis session store\nthat can be shared across multiple Sails.js servers.</p>\n<pre><code class="lang-javascript">adapter: &#39;redis&#39;,</code></pre>\n<p>The following values are optional, if no options are set a redis instance running\non localhost is expected.\nRead more about options at: <a href="https://github.com/visionmedia/connect-redis">https://github.com/visionmedia/connect-redis</a></p>\n<pre><code class="lang-javascript">        host: &#39;localhost&#39;,\n        port: 6379,\n        ttl: &lt;redis session TTL in seconds&gt;,\n        db: 0,\n        pass: &lt;redis auth password&gt;\n        prefix: &#39;sess:&#39;</code></pre>\n<p>Uncomment the following lines to use your Mongo adapter as a session store</p>\n<pre><code class="lang-javascript">        adapter: &#39;mongo&#39;,\n\n        host: &#39;localhost&#39;,\n        port: 27017,\n        db: &#39;sails&#39;,\n        collection: &#39;sessions&#39;,</code></pre>\n<p>Optional Values:</p>\n<pre><code class="lang-javascript">        // # Note: url will override other connection settings\n        // url: &#39;mongodb://user:pass@host:port/database/collection&#39;,\n\n        username: &#39;&#39;,\n        password: &#39;&#39;,\n        auto_reconnect: false,\n        ssl: false,\n        stringify: true</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.sockets.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.sockets">\n<h1>Socket Configuration</h1>\n<blockquote>\n<p><em>Note: You are viewing the Sails.js v0.9.0 documentation.  If you&rsquo;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>These configuration options provide transparent access to Sails&rsquo; encapsulated pubsub/socket server for complete customizability.</p>\n<h2>transports</h2>\n<p>Here is an array of allowed transport methods which the clients will try to use. The flashsocket transport is disabled by default; you can enable flashsockets by adding &lsquo;flashsocket&rsquo; to this list:</p>\n<pre><code class="lang-javascript">    transports: [\n    &#39;websocket&#39;,\n    &#39;htmlfile&#39;,\n    &#39;xhr-polling&#39;,\n    &#39;jsonp-polling&#39;\n   ],</code></pre>\n<h2>adapter</h2>\n<p><code>adapter: &#39;memory&#39;</code></p>\n<p>The data store where socket.io will store its message queue and answer pubsub logic</p>\n<h2>MQ Support for Redis</h2>\n<p>Node.js (and consequently Sails.js) apps scale horizontally. It&rsquo;s a powerful, efficient approach, but it involves a tiny bit of planning. At scale, you&rsquo;ll want to be able to copy your app onto multiple Sails.js servers and throw them behind a load balancer.</p>\n<p>One of the big challenges of scaling an application is that these sorts of clustered deployments cannot share memory, since they are on physically different machines. On top of that, there is no guarantee that a user will &ldquo;stick&rdquo; with the same server between requests, since the load balancer will route each request to the server with the least impact on load. All pubsub processing and shared memory has to be offloaded to a shared, remote messaging queue (usually Redis).</p>\n<p>Luckily, Sails provides production MQ support for Redis by default!</p>\n<p>To enable a remote redis pubsub server:</p>\n<pre><code class="lang-javascript">adapter: &#39;redis&#39;,\n\n// The IP address and configuration of your redis host:\n// (if left unset, Sails will try to connect to a redis via port 6379 on localhost)\n\nhost: &#39;127.0.0.1&#39;,\nport: 6379,\ndb: &#39;sails&#39;,\npass: &#39;&lt;redis auth password&gt;&#39;</code></pre>\n<h3>origins</h3>\n<p><code>origins: &#39;*:*&#39;</code></p>\n<p>Match string representing the origins that are allowed to connect to the Socket.IO server</p>\n<h2>heartbeats</h2>\n<p><code>heartbeats: true</code></p>\n<p>Sets whether we should use heartbeats to check the health of Socket.IO connections</p>\n<h2>close timeout</h2>\n<p><code>&#39;close timeout&#39;: 60</code></p>\n<p>When client closes connection, the # of seconds to wait before attempting a reconnect. This value is sent to the client after a successful handshake.</p>\n<h2>heartbeat timeout</h2>\n<p><code>&#39;heartbeat timeout&#39;: 60</code></p>\n<p>The # of seconds between heartbeats sent from the client to the server. This value is sent to the client after a successful handshake.</p>\n<h2>heartbeat interval</h2>\n<p><code>&#39;heartbeat interval&#39;: 25</code></p>\n<p>The max # of seconds to wait for an expcted heartbeat before declaring the pipe broken. This number should be less than the <code>heartbeat timeout</code></p>\n<h2>polling duration</h2>\n<p><code>&#39;polling duration&#39;: 20</code></p>\n<p>The maximum duration of one HTTP poll; if it exceeds this limit it will be closed.</p>\n<h2>flash policy server</h2>\n<p><code>&#39;flash policy server&#39;: true</code></p>\n<p>Enables the flash policy server if the flashsocket transport is enabled. </p>\n<h2>flash policy port</h2>\n<p><code>&#39;flash policy port&#39;: 10843</code></p>\n<p>By default the Socket.IO client will check port 10843 on your server to see if flashsocket connections are allowed. The Adobe Flash Player normally uses 843 as default port but Socket.io defaults to a non root port (10843) by default.</p>\n<p>If you are using a hosting provider that doesn&rsquo;t allow you to start servers other than on port 80 or the provided port, and you still want to support flashsockets  you can set the <code>flash policy port</code> to -1</p>\n<h2>destroy buffer size</h2>\n<p><code>&#39;destroy buffer size&#39;: &#39;10E7&#39;</code></p>\n<p>Used by the HTTP transports. The Socket.IO server buffers HTTP request bodies up to this limit. This limit is not applied to websocket or flashsockets.</p>\n<h2>destroy upgrade</h2>\n<p><code>&#39;destroy upgrade&#39;: true</code></p>\n<p>Do we need to destroy non-socket.io upgrade requests?</p>\n<h2>browser client</h2>\n<p><code>&#39;browser client&#39;: true</code></p>\n<p>Should Sails/Socket.io serve the <code>socket.io.js</code> client? (as well as WebSocketMain.swf for Flash sockets, etc.)</p>\n<h2>browser client cache</h2>\n<p><code>&#39;browser client cache&#39;: true</code></p>\n<p>Cache the Socket.IO file generation in the memory of the process to speed up the serving of the static files.</p>\n<h2>browser client minification</h2>\n<p><code>&#39;browser client minification&#39;: false</code></p>\n<p>Does Socket.IO need to send a minified build of the static client script?</p>\n<h2>browser client etag</h2>\n<p><code>&#39;browser client etag&#39;: false</code></p>\n<p>Does Socket.IO need to send an ETag header for the static requests?</p>\n<h2>browser client expires</h2>\n<p><code>&#39;browser client expires&#39;: 315360000</code></p>\n<p>Adds a Cache-Control: private, x-gzip-ok=&ldquo;&rdquo;, max-age=31536000 header to static requests, but only if the file is requested with a version number like /socket.io/socket.io.v0.9.9.js.</p>\n<h2>browser client gzip</h2>\n<p><code>&#39;browser client gzip&#39;: false</code></p>\n<p>Does Socket.IO need to GZIP the static files? This process is only done once and the computed output is stored in memory so we don&rsquo;t have to spawn a gzip process for each request.</p>\n<h2>browser client handler</h2>\n<p><code>&#39;browser client handler&#39;: false</code></p>\n<p>Optional override function to serve all static files, including socket.io.js et al. Of the form :: <code>function (req, res) { /* serve files */ }</code></p>\n<h2>match origin protocol</h2>\n<p><code>&#39;match origin protocol&#39;: false</code></p>\n<p>Meant to be used when running socket.io behind a proxy. Should be set to true when you want the location handshake to match the protocol of the origin. This fixes issues with terminating the SSL in front of Node and forcing location to think it&rsquo;s wss instead of ws.</p>\n<h2>authorization</h2>\n<p><code>authorization: true</code></p>\n<p>Global authorization for Socket.IO access. This is called when the initial handshake is performed with the server. By default, Sails verifies that a valid cookie was sent with the upgrade request However, in the case of cross-domain requests, no cookies are sent for some transports, so sockets will fail to connect.  You might also just want to allow anyone to connect w/o a cookie!</p>\n<p>To bypass this cookie check, you can set <code>authorization: false</code>, which will silently create an anonymous cookie+session for the user.</p>\n<p><code>authorization: true</code> indicates that Sails should use the built-in logic</p>\n<p>You can also use your own custom logic with: <code>authorization: function (data, accept) { ... }</code></p>\n<h2>store</h2>\n<p><code>store: undefined</code></p>\n<p>Direct access to the socket.io MQ store config. The &lsquo;adapter&rsquo; property is the preferred method (<code>undefined</code> indicates that Sails should defer to the &lsquo;adapter&rsquo; config)</p>\n<h2>logger</h2>\n<p><code>logger: undefined</code></p>\n<p>A logger instance that is used to output log information. (<code>undefined</code> indicates deferment to the main Sails log config)</p>\n<h2>log level</h2>\n<p><code>&#39;log level&#39;: undefined</code></p>\n<p>The amount of detail that the server should output to the logger. (<code>undefined</code> indicates deferment to the main Sails log config)</p>\n<h2>log colors</h2>\n<p><code>&#39;log colors&#39;: undefined</code></p>\n<p>Whether to color the log type when output to the logger. (<code>undefined</code> indicates deferment to the main Sails log config)</p>\n<h2>static</h2>\n<p><code>&#39;static&#39;: undefined</code></p>\n<p>A Static instance that is used to serve the socket.io client and its dependencies.</p>\n<h2>resource</h2>\n<p><code>resource: &#39;/socket.io&#39;</code></p>\n<p>The entry point where Socket.IO starts looking for incoming connections. This should be the same between the client and the server.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/config.views.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs config.views">\n<h1>Views</h1>\n<p>Server-sent views are a classic and effective way to get your app up and running.\nViews are normally served from controllers, but by default, Sails also exposes routes to allow you to preview your viewsn in a browser.  This automatic routing can be disabled using the <code>blueprint</code> config below.  You can also configure your templating language/framework of choice, and configure Sails&rsquo; layout support.</p>\n<h2>Routes</h2>\n<p>If enabled, views are automatically served at logical routes, based on their paths. This comes in handy any time you just want to serve some static HTML. (i.e. a brochure site)</p>\n<p>For example, the static view files below are available at the specified routes:</p>\n<ul>\n<li><code>views/catalog.ejs</code>          : <code>get /catalog</code></li>\n<li><code>views/catalog/index.ejs</code>    : both <code>get /catalog</code> &amp; <code>get /catalog/index</code></li>\n<li><code>views/catalog/story.ejs</code>    : <code>get /catalog/story</code></li>\n</ul>\n<h2>Layouts</h2>\n<p>Layouts are simply top-level HTML templates you can use as wrappers for your server-side views.  If you&rsquo;re using ejs, you can take advantage of Sails&rsquo; built-in <code>layout</code> support.</p>\n<p>With using a layout, when one of your views is served, it is injected into the <code>&lt;%- body %&gt;</code> partial defined in the layout.  This lets you reuse header and footer logic between views.</p>\n<p>The <code>layout</code> setting may be set to one of:</p>\n<ul>\n<li>true            ::    use default (&lsquo;layout&rsquo;), located at <code>views/layout.ejs</code></li>\n<li>false        ::    don&rsquo;t use a layout</li>\n<li>&ldquo;string&rdquo;        ::    the relative path to your layout from <code>views/</code></li>\n<li>the view engine extension, e.g. &ldquo;.ejs&rdquo;, may be omitted)</li>\n</ul>\n<p>If you&rsquo;d like to use more than one <code>layout</code> file, you can! Before rendering a view, override the <code>layout</code> locally by setting <code>res.locals.layout</code>. (handy if you parts of your app are completely different from each other.)</p>\n<p>e.g. your default might be <code>layout: &#39;layouts/public&#39;</code>, But you might override that in some of your controllers with:\n<code>layout: &#39;layouts/internal&#39;</code></p>\n<h2>Engine</h2>\n<h3>Templating engine/language to be used for your app&rsquo;s <strong>server-side</strong> views</h3>\n<p>Currently supported:\n+ ejs\n+ jade</p>\n<h3>Using Layouts With Other View Engines</h3>\n<p>In Express 3, built-in support for layouts/partials was deprecated. Instead, developers are expected to rely on the view engines themselves to implement this features. (See <a href="https://github.com/balderdashy/sails/issues/494">https://github.com/balderdashy/sails/issues/494</a> for more info on that.)</p>\n<p>Since adopting Express 3, Sails has chosen to support the legacy <code>layouts</code> feature for convenience, backwards compatibility with Express 2.x and Sails 0.8.x apps, and in particular, familiarity for new community members coming from other MVC frameworks. As a result, layouts have only been tested with the default view engine (ejs).</p>\n<p>If layouts aren&rsquo;t your thing, or (for now) if you&rsquo;re using a server-side view engine other than ejs, (e.g. Jade, handlebars, haml, dust) you&rsquo;ll need to set this option to: <code>layout:false</code> and then rely on your view engine&rsquo;s built-in layout/partial support.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/configuration.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs configuration">\n<h1>Configuration</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h3>Contents:</h3>\n<h4><a href="#!documentation/config.404">404</a></h4>\n<p>The default 404 handler.</p>\n<h4><a href="#!documentation/config.500">500</a></h4>\n<p>The default 500 error handler.</p>\n<h4><a href="#!documentation/config.adapters">Adapters</a></h4>\n<p>The adapters configuration object lets you create different global “saved settings” that you can mix and match in your models. </p>\n<h4><a href="#!documentation/config.bootstrap">Bootstrap</a></h4>\n<p>This is an asynchronous boostrap function that runs before your Sails app gets lifted (i.e. starts up). This gives you an opportunity to set up your data model, run jobs, or perform some special logic.</p>\n<h4><a href="#!documentation/config.controllers">Controllers</a></h4>\n<p>By default, Sails controllers automatically bind routes for each of their functions. Additionally, each controller will automatically bind routes for a CRUD API controlling the model which matches its name, if one exists.</p>\n<h4><a href="#!documentation/config.csrf">CSRF</a></h4>\n<p>When enabled, all non-GET requests to the Sails server must be accompanied by a special token, identified as the &#39;_csrf&#39; parameter.</p>\n<h4><a href="#!documentation/config.local">Local</a></h4>\n<p>While you’re developing your app, this config file should include any settings specifically for your development computer (db passwords, etc.)</p>\n<h4><a href="#!documentation/config.locales">Locales</a></h4>\n<p>This is a folder that contains the Language files for different locales.</p>\n<h4><a href="#!documentation/config.log">Log</a></h4>\n<p>The logger file configures the log level for your app, as well as the transport.</p>\n<h4><a href="#!documentation/config.policies">Policies</a></h4>\n<p>Policies are like any other system for authentication control. You can allow or deny access in fine granularity with policies.</p>\n<h4><a href="#!documentation/config.routes">Routes</a></h4>\n<p>Sails uses a number of different strategies to route requests. This section lists them top-to-bottom, in order of precedence.</p>\n<h4><a href="#!documentation/config.session">Session</a></h4>\n<p>Sails session integration leans heavily on the great work already done by Express, but also unifies Socket.io with the Connect session store.</p>\n<h4><a href="#!documentation/config.sockets">Sockets</a></h4>\n<p>These configuration options provide transparent access to Sails’ encapsulated pubsub/socket server for complete customizability.</p>\n<h4><a href="#!documentation/config.views">Views</a></h4>\n<p>Server-sent views are a classic and effective way to get your app up and running. Views are normally served from controllers, but by default, Sails also exposes routes to allow you to preview your viewsn in a browser.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/controllers.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs controllers">\n<h1>Controllers</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h2>What is a Controller?</h2>\n<p>Sails controllers work very similarly to controllers in other MVC frameworks. Think of controllers\nas being the middleman between your model and your views.</p>\n<h2>Where are Controllers Defined?</h2>\n<p>Controllers are defined in the <code>/api/controllers/</code> folder. By default when you create a\ncontroller using the command line, you can add additional arguments that represent the controller\nactions.</p>\n<pre><code>sails generate controller comment create destroy tag like</code></pre>\n<p>generates:</p>\n<pre><code class="lang-javascript">\n// Comment controller with generated actions.\nvar CommentController = {\n    create: function(req, res) {\n\n    },\n\n    destroy: function(req, res) {\n\n    },\n\n    tag: function(req, res) {\n\n    },\n\n    like: function(req, res) {\n\n    }\n}\n\nmodule.exports = CommentController;</code></pre>\n<!--\nAlternively if you add a federated flag [[[2]]] to the end of your generate controller command the\ncontroller will be created as a folder with each action being its own file. This is useful if\nyour actions contain a bunch of logic. No more super long controller files! The best part about this\nis that, routing to these actions works the exact same way!\n\n[[[3]]]\nwill create the directory, **api/controllers/comment/** with three files \n**/api/controllers/comment/create.js**,\n**/api/controllers/comment/destory.js**, and\n**/api/controllers/comment/tag.js**.\n\n-->\n\n<h2>How do I use the controller once I&rsquo;ve created it?</h2>\n<p>After a controller has been defined, Sails will automatically map out routes to give you easy access.<br>For the controller above, the routes would be the following:<br><code>http://localhost:1337/comment/create</code><br><code>http://localhost:1337/comment/destroy</code><br><code>http://localhost:1337/comment/tag</code><br><code>http://localhost:1337/comment/like</code>  </p>\n<p>Additionally, thanks to blueprints, you also get these methods by default:<br><code>get /:controller/:id?</code><br><code>post /:controller</code><br><code>put /:controller/:id</code><br><code>delete /:controller/:id</code>  </p>\n<p><code>/:controller/find/:id?</code><br><code>/:controller/create</code><br><code>/:controller/update/:id</code><br><code>/:controller/destroy/:id</code>  </p>\n<p>To turn off the CRUD routes, simply set the &lsquo;shortcuts&rsquo; flag to false in <code>config/controllers.js</code>,<br>and to turn off REST routes, simply set the &lsquo;rest&rsquo; flag to false in <code>config/conttrollers.js</code></p>\n<h2>The Request Object</h2>\n<h3><code>req.param()</code></h3>\n<p>Whether it was sent as POSTed JSON, to look up the value of a request parameter, do:</p>\n<pre><code class="lang-javascript">var foo = req.param(&#39;foo&#39;);</code></pre>\n<p>If you need to dive deeper into request parameters, check out the <a href="http://expressjs.com/2x/guide.html#req.param()">express guide</a>.</p>\n<h3><code>req.isSocket</code></h3>\n<p>Whether or not this request was sent over Socket.io</p>\n<h3><code>req.isAjax</code></h3>\n<p>Whether or not this is an AJAX/xhr request</p>\n<h3><code>req.isJson</code></h3>\n<p>Whether or not this request is JSONish (has a JSON &ldquo;Accept&rdquo; or &ldquo;Content-Type&rdquo; header)</p>\n<h2>The Response Object</h2>\n<p>When responding to a request, Sails uses many of the same res methods as Express.</p>\n<h3><code>res.view([view, options[, fn]])</code></h3>\n<p>This method is an enhanced version of  Express&rsquo;s <code>res.render()</code>. The method <code>res.view()</code>\nautomatically renders the appropriate view based on the controller and action. The original function\nis still accessible via <code>res.render()</code>.</p>\n<h3><code>res.send(body|status[, headers|status[, status]])</code></h3>\n<p>From the <a href="http://expressjs.com/2x/guide.html#res.send()">express guide</a>.\nThe <code>res.send()</code> method is a high level response utility allowing you to pass objects to respond\nwith json, strings for html, Buffer instances, or numbers representing the status code. The\nfollowing are all valid uses:</p>\n<pre><code class="lang-javascript">    res.send(); // 204\n    res.send(new Buffer(&#39;wahoo&#39;));\n    res.send({ some: &#39;json&#39; });\n    res.send(&#39;&lt;p&gt;some html&lt;/p&gt;&#39;);\n    res.send(&#39;Sorry, cant find that&#39;, 404);\n    res.send(&#39;text&#39;, { &#39;Content-Type&#39;: &#39;text/plain&#39; }, 201);\n    res.send(404);</code></pre>\n<p>By default the Content-Type response header is set, however if explicitly assigned through\n<code>res.send()</code> or previously with <code>res.header()</code> or <code>res.contentType()</code> it will not be set\nagain.</p>\n<p>Note that this method ends the response, so you will want to use node’s <code>res.write()</code> for multiple\nwrites or streaming.</p>\n<h3><code>res.json(obj[, headers|status[, status]])</code></h3>\n<p>From the <a href="http://expressjs.com/2x/guide.html#res.json()">express guide</a>.\nSend a JSON response with optional headers and status. This method is ideal for JSON-only APIs,\nhowever <code>res.send(obj)</code> will send JSON as well, though not ideal for cases when you want to send\nfor example a string as JSON, since the default for <code>res.send(string)</code> is text/html.</p>\n<pre><code class="lang-javascript">    res.json(null);\n    res.json({ user: &#39;tj&#39; });\n    res.json(&#39;oh noes!&#39;, 500);\n    res.json(&#39;I dont have that&#39;, 404);</code></pre>\n<h3><code>res.redirect(url[, status])</code></h3>\n<p>From the <a href="http://expressjs.com/2x/guide.html#res.redirect()">express guide</a>.\nRedirect to the given url with a default response status of 302.</p>\n<pre><code class="lang-javascript">    res.redirect(&#39;/&#39;, 301);\n    res.redirect(&#39;/account&#39;);\n    res.redirect(&#39;http://google.com&#39;);\n    res.redirect(&#39;home&#39;);\n    res.redirect(&#39;back&#39;);</code></pre>\n<h3><code>res.viewExists</code></h3>\n<p>Whether or not the view for this controller exists.</p>\n<h2>Accessing your models</h2>\n<p>In many cases, the reason you have a controller at all is that you want to do custom stuff with your models.  Otherwise, you could just use the defaults!</p>\n<p>For example, your controller might look like:</p>\n<pre><code class="lang-javascript">// Keep in mind you&#39;d probably want to do this transactionally, in case the chicken is being pecked \nvar ChickenController = {\n\n  // Peck the chicken specified by id (subtract 50 HP)\n  peck: function (req,res) {\n    Chicken.find(req.param(&#39;id&#39;)).exec(function (err, chicken) {\n      if (err) return res.send(err,500);\n      if (!chicken) return res.send(&quot;No other chicken with that id exists!&quot;, 404);\n      if (chicken.hp &lt;= 0) return res.send(&quot;The other chicken is already dead!&quot;, 403);\n\n      // Subtract 50 HP from the chicken\n      chicken.hp -= 50;\n\n      // Persist the change\n      chicken.save(function (err) {\n        if (err) return res.send(err,500);\n\n        // Report back with the new state of the chicken\n        res.json(chicken);\n      });\n    });\n\n  }\n};\nmodule.exports = ChickenController;</code></pre>\n<p>Check out the page on <a href="https://github.com/balderdashy/sails/wiki/Models">Models</a> to learn more.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/custom-adapters.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs custom-adapters">\n<h1>Adapters</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h4><em>See <a href="https://github.com/balderdashy/sails-adapter-boilerplate">sails-adapter-boilerplate</a> for a quick start guide.</em></h4>\n<p>Like most MVC frameworks, Sails provides an ORM (Object Relational Mapping) called Waterline for normalizing\ninteractions with models, no matter what data source you&#39;re using. In this guide, we&#39;ll be demonstrating how to build adapters for Waterline by building one for Redis.</p>\n<h2>Code Setup</h2>\n<p>To get started, you&#39;ll need to clone the main sails repo and create or clone a repo for your new adapter. In our case, the adapter is called &quot;sails-redis&quot;, keeping in line with the Sails convention of naming adapters with the format &quot;sails-<db name>&quot;. So, you should have a <code>sails/</code> and a <code>sails-redis/</code> directory.</p>\n<p>Next, we need to set up the project with the initial file structure, so do:</p>\n<pre><code>cd sails-redis\ntouch README.md\ntouch package.json\ntouch .gitignore\ntouch RedisAdapter.js</code></pre>\n<p>You&#39;ll notice that the actual adapter is named RedisAdapter.js. This is also a Sails convention. Name your adapter <DBname>Adapter.js. You can set up your .gitignore like this or any way you like:</p>\n<pre><code>.\\#*\n*#\nnode_modules\nssl\n.DS_STORE\n*~\n.idea\nnbproject\n.waterline\nnpm-debug.log</code></pre>\n<p>The README is next:</p>\n<pre><code>![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png) \n\n# RedisAdapter\n\nAdds Redis support for Sails.\n\n# Sails.js Repo\nhttp://SailsJs.com\n\n\n## About Waterline\nWaterline is a new kind of storage and retrieval engine.  It provides a uniform API for accessing stuff from different kinds of databases, protocols, and 3rd party APIs.  That means you write the same code to get users, whether they live in mySQL, LDAP, MongoDB, or Facebook.\nWaterline also comes with built-in transaction support, as well as a configurable environment setting. \n&gt; NOTE: Waterline is currently in unreleased alpha-- that means it&#39;s not production ready!  If you want to use waterline in a production app, please contribute.  Currentliy, the plan is for an open alpha release early next year (2013).  Thanks!\nYou can learn more about\n\n*Waterline repo: #!documentation/sails-redis.git&quot;\n  },\n  &quot;keywords&quot;: [\n    &quot;redis&quot;,\n    &quot;orm&quot;,\n    &quot;waterline&quot;,\n    &quot;sails&quot;\n  ],\n  &quot;author&quot;: &quot;Carlo DiCelico&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;readmeFilename&quot;: &quot;README&quot;,\n  &quot;dependencies&quot;: {\n    &quot;async&quot;: &quot;0.1.22&quot;,\n    &quot;underscore&quot;: &quot;1.4.3&quot;,\n    &quot;underscore.string&quot;: &quot;2.3.1&quot;,\n    &quot;redis&quot;: &quot;0.8.2&quot;,\n    &quot;hiredis&quot;: &quot;0.1.14&quot;\n  }\n}</code></pre>\n<p>And finally, some boilerplate for the adapter, which I&#39;ll explain later. Note that some of this may be different for your adapter, but this is a good general starting point. You can also refer to the other adapters (sails-mysql, sails-dirty, and sails-mongo) to get a feel for how they vary:</p>\n<pre><code>/*---------------------------------------------------------------\n  :: sails-redis\n  -&gt; adapter\n---------------------------------------------------------------*/\n\nvar async = require(&#39;async&#39;)\n, _       = require(&#39;underscore&#39;)\n, _str    = require(&#39;underscore.string&#39;)\n, redis   = require(&#39;redis&#39;);\n\nmodule.exports = (function(){\n\n  var dbs = {};\n\n  var adapter = {\n\n    syncable: false,\n\n    registerCollection: function(collection, cb) {},\n\n    teardown: function(cb) {},\n\n    describe: function(collectionName, cb) {},\n\n    define: function(collectionName, definition, cb) {},\n\n    drop: function(collectionName, cb) {},\n\n    create: function(collectionName, data, cb) {},\n\n    find: function(collectionName, options, cb) {},\n\n    stream: function(collectionName, options, stream) {},\n\n    update: function(collectionName, options, values, cb) {},\n\n    destroy: function(collectionName, options, cb) {},\n\n    identity: &#39;sails-redis&#39;\n\n  };\n\n  //////////////                 //////////////////////////////////////////\n  ////////////// Private Methods //////////////////////////////////////////\n  //////////////                 //////////////////////////////////////////\n  function connect (collection, cb) {}\n\n  function marshalConfig(config) {}\n\n  return adapter;\n\n})();</code></pre>\n<h2>Testing Setup</h2>\n<p>To set up testing, from within the adapter directory, <code>sails-redis/</code> in this case, do <code>npm link</code>. Then change to the <code>sails/</code> directory and npm link to the custom module: <code>cd ../sails &amp;&amp; npm link sails-redis</code>. Once that&#39;s done, you can verify that you can run tests by doing <code>npm test</code> from within <code>sails/</code>. The tests will fail at this point but that&#39;s okay, you just want to verify that they&#39;re running and can see your new adapter.</p>\n<h2>Adapter API</h2>\n<h3><code>Model.update(collectionName, criteria, newValues, cb) :: cb(err, success)</code></h3>\n<h4>Update one or more models:</h4>\n<ul>\n<li>err is truthy if an error occurred</li>\n<li>success is truthy if the update was successful</li>\n<li>err AND success are falsy if the update was unsuccessful because the criteria in question didn&#39;t return any extant models</li>\n</ul>\n<h3><code>Model.destroy(collectionName, criteria, cb) :: cb(err, success)</code></h3>\n<h4>Destroy one or more models:</h4>\n<ul>\n<li>err is truthy if an error occurred</li>\n<li>success is truthy if the update was successful</li>\n<li>err AND success are falsy if the operation was unsuccessful because the criteria in question didn&#39;t return any extant models</li>\n</ul>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/deployment.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs deployment">\n<h1>Deploying your Sails.js application</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h2>Considerations</h2>\n<p>Before you launch any web application, you should consider a few factors:\n+ What is your expected traffic?\n+ Are you contractually required to meet any uptime guarantees?\n+ What sorts of front-end apps will be &quot;hitting&quot; your infrastructure?  And what kinds of things will they be requesting?\n+ Will you be taking advantage of realtime pubsub features with Socket.io?</p>\n<h2>Here&#39;s how you deploy in production mode:</h2>\n<blockquote>\n<p><strong>Note:</strong> This is a quick start. The proper way to deploy is with <a href="http://upstart.ubuntu.com">upstart</a> and <a href="http://nginx.org/">nginx</a> and takes a lot more work to set up.</p>\n</blockquote>\n<ul>\n<li>Install forever: <code>sudo npm install -g forever</code></li>\n<li>From your app directory, start the server with forever: <code>forever start app.js --prod</code></li>\n</ul>\n<p>More about forever: <a href="https://github.com/nodejitsu/forever">https://github.com/nodejitsu/forever</a></p>\n<h2>Other things you&#39;ll likely want to do in production:</h2>\n<ul>\n<li>Configure your app to run on port 80 (if not behind a proxy like nginx)</li>\n<li>Put it in &quot;production&quot; mode so that all of your css/js gets bundled up (requires <a href="#!documentation/assets">linker</a>)</li>\n</ul>\n<p><strong>config/local.js</strong></p>\n<pre><code class="lang-javascript">// Local configuration\n// \n// Included in the .gitignore by default,\n// this is where you include configuration overrides for your local system\n// or for a production deployment.\n//\n// For example, to use port 80 on the local machine, override the `port` config\nmodule.exports = {\n    port: 80,\n    environment: &#39;production&#39;,\n    adapters: {\n        mysql: {\n            user: &#39;root&#39;,\n            password: &#39;12345&#39;\n        }\n    }\n}</code></pre>\n<h4>More on that here:</h4>\n<p><a href="http://www.youtube.com/watch?v=GK-tFvpIR7c">http://www.youtube.com/watch?v=GK-tFvpIR7c</a></p>\n<p>The big omission from that video is that, if you plan on keeping your app running (which you probably do!), you&#39;ll need to follow the steps mentioned above to use <code>forever.</code></p>\n<h2>Getting your app on the server</h2>\n<p>Is your Node.js instance already spun up?  When you have the ip address, you can go ahead and ssh onto it, then <code>sudo npm install -g forever</code> to install Sails and forever for the first time.  </p>\n<p>Then <code>git clone</code> your project (or <code>scp</code> it onto the server if it&#39;s not in a git repo) into a new folder on the server and cd into it, and <code>forever start app.js</code></p>\n<h2>Deploying to NodeJitsu?</h2>\n<p>The Cloud is the future, and we want to help you get there.  To Depoloy to NodeJitsu, You&#39;ll need to make some minor modifications to your configuration.  Don&#39;t worry, It won&#39;t be like writing a new book or anything.</p>\n<p>Open up <code>config/local.js</code> in your app folder. In here, you&#39;ll need to add the following lines.</p>\n<pre><code>    // Port this Sails application will live on\n    port: 80,\n    host: &#39;subdomain.jit.su&#39;,</code></pre>\n<p>The <code>host:</code> is new to the file and is not created by default.  You will need to add this.  Nodejitsu will ask you for the <code>subdomain</code> when you run <code>jitsu deploy</code></p>\n<!-- TODO: heroku deploy (with grunt postinstall script) -->\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/examples.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs examples">\n<p><a href="https://github.com/vicapow/sails-passport">Using Sails with Passport</a></p>\n<ul>\n<li>A <a href="https://github.com/webjames/sails-passport-example">Sails.js Passport example project</a> based on <a href="https://gist.github.com/theangryangel/5060446">AuthController.js</a> using <a href="http://passportjs.org">Passport</a>.</li>\n</ul>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/getting-started.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs getting-started">\n<h1>Getting Started</h1>\n<h2>Installation</h2>\n<p>To install the latest stable release with the command-line tool:</p>\n<pre><code>sudo npm -g install sails</code></pre>\n<h2>Creating a New Sails Project</h2>\n<p>Create a new app:</p>\n<pre><code>sails new testProject</code></pre>\n<p>Now lift the server:</p>\n<pre><code>cd testProject\nsails lift</code></pre>\n<p>At this point, if you visit (<a href="http://localhost:1337/">http://localhost:1337/</a>) you will see the default home page.</p>\n<p>Now, let&#39;s get Sails to do cool stuff.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/models.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs models">\n<h1>Models</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Like most MVC frameworks, Sails provides an ORM (Object Relational Mapping) called\n<a href="https://github.com/balderdashy/waterline">Waterline</a> for normalizing interactions with models,\nno matter what data source you&#39;re using. It also defines an interface for mapping your own custom\nmodels from external APIs, not-yet-supported databases, or in-memory state (i.e. Session storage.)</p>\n<h2>What is a Model?</h2>\n<p>A model is a persistent data type: a representation of data stored in a database. If you&#39;re using\nMySQL, a model might correspond to a table. If you&#39;re using MongoDB, it might correspond to a\ncollection. In either case, our goal is to provide a simple, modular way of managing data without\nrelying on any one type of database.</p>\n<h2>How do I define a Model?</h2>\n<p>Model definitions contain attributes, validations, instance methods, lifecycle callbacks and\nclass methods.</p>\n<h3>Attributes</h3>\n<p>Attributes are basic pieces of information about a model. For instance, a model called <code>Person</code>\nmight have attributes called <code>firstName</code>, <code>lastName</code>, <code>phoneNumber</code>, <code>age</code>, <code>birthDate</code> and <code>emailAddress</code>.\nThe model definition for <code>Person</code> might look like this:</p>\n<pre><code class="lang-javascript">// Person.js\nvar Person = {\n  attributes: {\n    firstName: &#39;STRING&#39;,\n    lastName: &#39;STRING&#39;,\n    age: {\n      type: &#39;INTEGER&#39;,\n      max: 150,\n      required: true\n    }\n    birthDate: &#39;DATE&#39;,\n    phoneNumber: {\n      type: &#39;STRING&#39;,\n      defaultsTo: &#39;111-222-3333&#39;\n    }\n    emailAddress: {\n      type: &#39;email&#39;, // Email type will get validated by the ORM\n      required: true\n    }\n  }\n};\n\nmodule.exports = Person;</code></pre>\n<h4>Available Attribute Types:</h4>\n<p>The following attribute types are currently available:</p>\n<ul>\n<li>string</li>\n<li>text</li>\n<li>integer</li>\n<li>float</li>\n<li>date</li>\n<li>time</li>\n<li>datetime</li>\n<li>boolean</li>\n<li>binary</li>\n<li>array</li>\n<li>json</li>\n</ul>\n<p>To learn more about what methods are available to you, check out the <a href="https://github.com/balderdashy/waterline">waterline documentation</a>.</p>\n<h3>Validations</h3>\n<p>Validations are defined on you attributes when defining a model. It uses\n<a href="https://github.com/balderdashy/anchor">Anchor</a> behind the scenes to run validations whenever you\ncreate or update a record.</p>\n<pre><code class="lang-javascript">attributes: {\n  name: {\n    type: &#39;string&#39;,\n    maxLength: 20,\n    minLength: 5\n  },\n\n  email: {\n    type: &#39;email&#39;,\n    required: true\n  }\n}</code></pre>\n<p>Available validations are:</p>\n<ul>\n<li>empty</li>\n<li>required</li>\n<li>notEmpty</li>\n<li>undefined</li>\n<li>string</li>\n<li>alpha</li>\n<li>numeric</li>\n<li>alphanumeric</li>\n<li>email</li>\n<li>url</li>\n<li>urlish</li>\n<li>ip</li>\n<li>ipv4</li>\n<li>ipv6</li>\n<li>creditcard</li>\n<li>uuid</li>\n<li>uuidv3</li>\n<li>uuidv4</li>\n<li>int</li>\n<li>integer</li>\n<li>number</li>\n<li>finite</li>\n<li>decimal</li>\n<li>float</li>\n<li>falsey</li>\n<li>truthy</li>\n<li>null</li>\n<li>notNull</li>\n<li>boolean</li>\n<li>array</li>\n<li>date</li>\n<li>hexadecimal</li>\n<li>hexColor</li>\n<li>lowercase</li>\n<li>uppercase</li>\n<li>after</li>\n<li>before</li>\n<li>is</li>\n<li>regex</li>\n<li>not</li>\n<li>notRegex</li>\n<li>equals</li>\n<li>contains</li>\n<li>notContains</li>\n<li>len</li>\n<li>in</li>\n<li>notIn</li>\n<li>max</li>\n<li>min</li>\n<li>minLength</li>\n<li>maxLength</li>\n</ul>\n<h3>Instance Methods</h3>\n<p>You can attach instance methods to a model which will be available on any record returned from\na query. There are also a few helper instance methods that get attached to allow you to perform\noperations on a model instance without having to build the lookup criteria.</p>\n<p>Helper Instance Methods:</p>\n<ul>\n<li>save</li>\n<li>destroy</li>\n<li>toObject</li>\n<li>toJSON</li>\n</ul>\n<h3>Save Instance Method</h3>\n<p>The save instance method will write the current values of the model instance to the datastore.\nIt only takes a callback as it&#39;s argument.</p>\n<pre><code class="lang-javascript">// Lookup a user\nUser.findOne(1).done(function(err, user) {\n\n  // we now have a model with instance methods attached\n  // update an attribute value\n  user.email = &#39;foo.bar@gmail.com&#39;;\n\n  // save the updated value\n  user.save(function(err) {\n    // value has been saved\n  });\n\n});</code></pre>\n<h3>Destroy Instance Method</h3>\n<p>The destroy instance method allows you to delete a single record from the datastore without having\nto build up a criteria search.</p>\n<pre><code class="lang-javascript">// Lookup a user\nUser.findOne(1).done(function(err, user) {\n\n  // we now have a model with instance methods attached\n\n  // destroy the record\n  user.destroy(function(err) {\n    // record has been removed\n  });\n\n});</code></pre>\n<h3>toObject/toJSON Instance Methods</h3>\n<p>The <code>toObject()</code> method will return the currently set model values only, without any of the instance\nmethods attached. Useful if you want to change or remove values before sending to the client.</p>\n<p>However we provide an even easier way to filter values before returning to the client when using\nthe blueprints by allowing you to override the <code>toJSON()</code> method in your model. This function will\nautomatically be called when using the blueprints so you don&#39;t need to write custom controllers in\norder to filter values.</p>\n<p>Example of filtering a password in your model definition:</p>\n<pre><code class="lang-javascript">module.exports = {\n  attributes: {\n    name: &#39;string&#39;,\n    password: &#39;string&#39;,\n\n    // Override toJSON instance method\n    // to remove password value\n    toJSON: function() {\n      var obj = this.toObject();\n      delete obj.password;\n      return obj;\n    }\n  }\n}\n\n// Then later when you query it:\n\nUser.findOne(1).done(function(err, user) {\n  // user.password doesn&#39;t exist\n});</code></pre>\n<h3>Custom Defined Instance Methods</h3>\n<p>You may define custom instance methods that are available after querying a model. These are defined\nas functions in your model attributes.</p>\n<pre><code class="lang-javascript">module.exports = {\n\n  attributes: {\n    firstName: &#39;string&#39;,\n    lastName: &#39;string&#39;,\n\n    // Define a custom instance method\n    fullName: function() {\n      return this.firstName + &#39; &#39; + this.lastName;\n    }\n  }\n}\n\n// Then use it in your query results like:\nUser.findOne(1).done(function(err, user) {\n  // use the instance method\n  var name = user.fullName();\n});</code></pre>\n<h2>Lifecycle Callbacks</h2>\n<p>Lifecycle callbacks are functions you can define to run at certain times in a query. They are hooks\nthat you can tap into in order to change data. An example use case would be automatically\nencrypting a password before creating or automatically generating a slugified url attribute.</p>\n<p><em>Callbacks run on Create:</em></p>\n<pre><code>- beforeValidation / *fn(values, cb)*\n- beforeCreate / *fn(values, cb)*\n- afterCreate / *fn(newlyInsertedRecord, cb)*</code></pre>\n<p><em>Callbacks run on Update:</em></p>\n<pre><code>- beforeValidation / *fn(valuesToUpdate, cb)*\n- beforeUpdate / *fn(valuesToUpdate, cb)*\n- afterUpdate / *fn(updatedRecord, cb)*</code></pre>\n<p><em>Callbacks run on Destroy:</em></p>\n<pre><code>- beforeDestroy / *fn(criteria, cb)*\n- afterDestroy / *fn(cb)*</code></pre>\n<p><strong>Examples</strong></p>\n<p>Encrypt a password before saving to the database.</p>\n<pre><code class="lang-javascript">var bcrypt = require(&#39;bcrypt&#39;);\n\nmodule.exports = {\n\n  attributes: {\n\n    username: {\n      type: &#39;string&#39;,\n      required: true\n    },\n\n    password: {\n      type: &#39;string&#39;,\n      minLength: 6,\n      required: true,\n      columnName: &#39;encrypted_password&#39;\n    }\n\n  },\n\n\n  // Lifecycle Callbacks\n  beforeCreate: function(values, next) {\n    bcrypt.hash(values.password, 10, function(err, hash) {\n      if(err) return next(err);\n      values.password = hash;\n      next();\n    });\n  }\n};</code></pre>\n<h2>Custom Table Names</h2>\n<p>You can define a custom table name on your adapter by adding a <code>tableName</code> attribute. If no table\nname is supplied it will use the filename as the table name when passing it to an adapter. So if\nyou model is name UserModel the table name will be set to user by default.</p>\n<pre><code class="lang-javascript">// api/models/User.js\nmodule.exports = {\n  tableName: &#39;sails_user&#39;,\n  attributes: {\n    // attributes here\n  }\n};</code></pre>\n<h2>Adapters</h2>\n<p>Adapters can be included from npm, or defined locally in the <code>api/adapters</code> directory of your\nproject.</p>\n<p>You can override the adapter globally for your application, or you can configure different models\nto point to different adapters. To see how to change your default application adapter config,\ncheck out the Configuration section of this documentation at\n<a href="#!documentation/configuration">Configuration</a></p>\n<p>To override the adapter of a single model, you specify the adapter module&#39;s name and any extra\nconfiguration information necessary to make it work.</p>\n<p>For example:</p>\n<pre><code class="lang-javascript">// api/models/User.js\nmodule.exports = {\n\n  adapter: &#39;mysql&#39;,\n\n  config: {\n    user: &#39;root&#39;,\n    password: &#39;thePassword&#39;,\n    database: &#39;testdb&#39;,\n    host: &#39;127.0.0.1&#39;\n  },\n\n  attributes: {\n    name: &#39;string&#39;,\n    email: &#39;string&#39;,\n    phoneNumber: {\n      type: &#39;string&#39;,\n      defaultsTo: &#39;555-555-5555&#39;\n    }\n  }\n\n};</code></pre>\n<p>Our global is set to <code>disk</code>, however since we overrode the adapter our User models will now be\nstored in MySQL using the sails-mysql adapter.</p>\n<h3>Schemaless Mode</h3>\n<p>For adapters that don&#39;t require a schema such as Mongo or Redis the default setting is to be schemaless. This means\nthat you don&#39;t need to specify attributes on your model in order to persist them. For some cases this may be fine but\nin other cases you would like to specify that all data sticks to a schema.</p>\n<p>You can toggle the <code>schema</code> flag on models on or off. However note that if you are using a schema database such as MySQL\nor PostgreSQL you will not be able to use the model if <code>schema</code> is set to false.</p>\n<pre><code class="lang-javascript">module.exports = {\n\n adapter: &#39;mongo&#39;,\n schema: true,\n\n attributes: {\n   // some attributes\n }\n};</code></pre>\n<p>You may also set the <code>schema</code> flag globally in your <code>config/adapters.js</code> for a datastore. This will enable/disable a schema\non all your models.</p>\n<pre><code class="lang-javascript">module.exports.adapters = {\n  mongo: {\n    module: &#39;sails-mongo&#39;,\n    schema: true\n  }\n};</code></pre>\n<h2>Associations</h2>\n<p>Associations are not yet available for Sails.JS, however are on the immediate todo list.\nPlease check out issue <a href="https://github.com/balderdashy/sails/issues/124">#124</a> for more\ninformation regarding the proposed changes for associations.</p>\n<!-- Associations describe how models are connected to each other.  The concept originates from SQL databases, but it has analogues in noSQL databases as well (links and embeds).  NoSQL support for Sails\' ORM is currently under development. -->\n\n<!--\nSince Sails supports both relational and non-relational databases, we must support both standard SQL associations (links) and bundled JSON, Mongo-style associations (embeds)\n\n## Embedding\n_TODO_\n\n## Linking\n_TODO_\n-->\n\n<!-- #### One-To-One\n_TODO_\n\n#### One-To-Many\n_TODO_\n\n#### Many-To-Many\n_TODO_ -->\n\n<h2>Where do I define Models?</h2>\n<p>Models are defined in the <strong>api/models/</strong> directory in your Sails application.\n<!-- You can create them with their attributes using.   name:string age:int email:string --></p>\n<p>You can generate a model with the command line tool:</p>\n<pre><code>sails generate model Person</code></pre>\n<h2>Automatic schema creation</h2>\n<p>Depending on your configuration, the database tables will be recreated automatically.</p>\n<h2>Querying Models</h2>\n<p>You&#39;ll want to create, access, modify, and destroy models from controllers, views, services, and\npolicies, and so you&#39;ll need a way to deal with them.</p>\n<p>Queries can be run with either a callback interface or with a deferred object. For building\ncomplicated queries the deferred object method is the best choice.</p>\n<h3>Callback Method</h3>\n<pre><code class="lang-javascript">User.findOne({ id: 1 }, function(err, user) {\n  // Do stuff here\n});</code></pre>\n<h3>Deferred Object Method</h3>\n<pre><code class="lang-javascript">User.find()\n.where({ id: { &#39;&gt;&#39;: 100 }})\n.where({ age: 21 })\n.limit(100)\n.sort(&#39;name&#39;)\n.exec(function(err, users) {\n  // Do stuff here\n});</code></pre>\n<h2><code>create</code></h2>\n<p>To create a new record in the database, use <code>create()</code>.</p>\n<pre><code class="lang-javascript">// For example\nUser.create({\n  name: &#39;Mike&#39;,\n  age: 13,\n  phoneNumber: &#39;(512)-555-5555&#39;\n}).done(function(err, user) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // The User was created successfully!\n  }else {\n    console.log(&quot;User created:&quot;, user);\n  }\n});</code></pre>\n<h2><code>findOne</code></h2>\n<p>To lookup a model by id, use <code>findOne(id)</code>. You can call also look for a model by passing in an\nobject composed of the desired matching criteria.</p>\n<pre><code class="lang-javascript">// For example to find by id\nUser.findOne(123).done(function(err, user) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // The User was found successfully!\n  } else {\n    console.log(&quot;User found:&quot;, user);\n  }\n});\n\n\n// To find by a criteria\nUser.findOne({\n  name: &#39;Steven&#39;,\n  age: 32,\n  phone:&#39;(210)-555-1234&#39;\n}).done(function(err, user) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // The User was found successfully!\n  } else {\n    console.log(&quot;User found:&quot;, user);\n  }\n});</code></pre>\n<h2><code>find</code></h2>\n<p><code>find()</code> lets you search for one or more models which meet the criteria you specify. You can also\ninclude a <code>limit</code> (max number of models to return), <code>skip</code> (useful for pagination), and sort\n<code>sort</code>. Find all will always return an array even if only one model fits the criteria.</p>\n<pre><code class="lang-javascript">// For example, this query returns the first ten 18 year olds, sorted alphabetically\nUser.find({\n  age: 18\n}).limit(10).sort(&#39;name ASC&#39;).done(function(err, users) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // Found multiple users!\n  } else {\n    console.log(&quot;Users found:&quot;, users);\n  }\n});</code></pre>\n<p>Below are some more examples.  Some of these examples include query modifiers.\nYou can view more about query modifiers\n<a href="https://github.com/balderdashy/sails/wiki/Models#query-modifiers">here</a>.</p>\n<pre><code class="lang-javascript">// Search-as-you-type input field\nUser.find({\n  name: {\n    startsWith: &#39;thelas&#39;\n  }\n}, cb);\n\n// Search-as-you-type input field which checks multiple attributes\nUser.find({\n  or: [\n    name: { startsWith: &#39;thelas&#39; },\n    email: { startsWith: &#39;thelas&#39; }\n  ]\n}, cb);\n\n// Keyword search\nUser.find({\n  description: {\n    contains: &#39;roller coaster&#39;\n  }\n}, cb);\n\n// Alphabetical search\nUser.find({\n  name: {\n    &#39;&gt;=&#39;: &#39;a&#39;\n  }\n}, cb);\n// you can also do &lt;=, &lt;, &gt;, and ! See query modifiers\n\n// Alphabetical search.. but paginated:\n// (here&#39;s page 2)\nUser.find({\n  where: {\n    name: {\n      &#39;&gt;=&#39;: &#39;a&#39;\n    }\n  },\n  limit: 15,\n  skip: 15,\n  sort: &#39;name ASC&#39;\n}, cb);</code></pre>\n<h2>Dynamic finders</h2>\n<p>With Sails built in ORM, <a href="https://github.com/balderdashy/waterline">Waterline</a>, you can use a very\nhelpful tool called dynamic finders. You can query your models with automatically genereated methods\nthat depend on the attributes you define for the model. For example, if you had a book model that\nlooks like this.</p>\n<pre><code class="lang-javascript">var Book = {\n  title: &#39;STRING&#39;,\n  author: &#39;STRING&#39;,\n  publisher: &#39;STRING&#39;,\n}\n\nmodule.exports = Book;</code></pre>\n<p>You can query the db using methods such as these</p>\n<pre><code class="lang-javascript">\n// Query by author\nBook.findOneByTitle(&#39;50 Shades of Grey&#39;).done(function(err, book) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // The Book was found successfully!\n  } else {\n    console.log(&quot;Book found:&quot;, book);\n  }\n});\n\n// Query by Author\nBook.findByAuthor(&#39;John R. Erickson&#39;).done(function(err, books) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // The Books were found successfully!\n  } else {\n    console.log(&quot;Books found:&quot;, books);\n  }\n});</code></pre>\n<h2><code>update</code></h2>\n<p><code>update()</code> allows you to update an instance of a model from the database. It will always return\nan array of records that have been updated.</p>\n<pre><code class="lang-javascript">// For example, to update a user&#39;s name,\n// .update(query, params to change, callback)\nUser.update({\n  name: &#39;sally&#39;\n},{\n  phone: &#39;555-555-5555&#39;\n}, function(err, users) {\n  // Error handling\n  if (err) {\n    return console.log(err);\n  // Updated users successfully!\n  } else {\n    console.log(&quot;Users updated:&quot;, users);\n  }\n});</code></pre>\n<h2><code>destroy</code></h2>\n<p><code>destroy()</code> allows you to delete models from the database. It will work on all matching criteria.</p>\n<pre><code class="lang-javascript">// For example, to delete a user named Johnny,\nUser.destroy({\n  name: &#39;Johnny&#39;,\n  age: 22\n}).done(function(err) {\n\n  // Error handling\n  if (err) {\n    return console.log(err);\n\n  // Johnny was deleted!\n  } else {\n    console.log(&quot;User deleted&quot;);\n  }\n});</code></pre>\n<h2>Query Modifiers</h2>\n<p>Modifiers can be used in your database queries.  These make it easier to get information from your\ndatabase without having to write a bunch of code. Currently supported modifiers are <em>contains</em>,\n<em>or</em>, <em>startsWith</em>, <em>endsWith</em>, <em>greaterThan</em>, <em>lessThan</em>, <em>&gt;=</em>, and <em>&lt;=</em>.\nEach of these are shown in examples below.</p>\n<h2>Modifier: <code>contains</code></h2>\n<p>In order to use a <code>contains</code> modifier, you would do the following.</p>\n<pre><code class="lang-javascript">where: {\n  name: {\n    contains: &#39;James&#39;\n  }\n}</code></pre>\n<h2>Modifier: <code>or</code></h2>\n<p>In order to use an <code>or</code> modifier, you would do the following.</p>\n<pre><code class="lang-javascript">where: {\n  or: [{name: &#39;James&#39;}, {name: &#39;Mike&#39;}]\n}</code></pre>\n<p>name: {\n &#39;&gt;&#39;: &#39;a&#39;\n}</p>\n<h2>What About Migrations?</h2>\n<p>In schemaful databases (like MySQL) schema migrations occur automatically.  Models default to\n<code>migrate:alter</code>, which tells Sails to attempt to auto-migrate the schema.</p>\n<p>Explicit production data migrations, like in Rails, do not exist at this time-- production data is\nprecious, and manual migrations can be dangerous.  However, if this is a feature that you are\ninterested in, please submit an issue, or better yet, a pull-request!</p>\n<h3>More Information</h3>\n<p>For more information on using Models you can visit the\n<a href="https://github.com/balderdashy/waterline">Waterline</a> documentation which goes more in depth on how\nthe internals work.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/new-to-nodejs.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs new-to-nodejs">\n<h1>New to <a href="https://soundcloud.com/marak/marak-the-node-js-rap">Node.js</a>?</h1>\n<p>Thats okay!  We&#39;ll get you pointed in the right direction.</p>\n<p>Per <a href="http://nodejs.org">nodejs.org</a>:</p>\n<blockquote>\n<p>&quot;Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.&quot;</p>\n</blockquote>\n<p>More simply put, Node.js is an http server built to run quickly and efficiently while allowing you to use the same language on both the frontend and the backend.</p>\n<h2>What OS do I need?</h2>\n<p>Node.js will install on most major Operating systems.  MacOSX, many flavors of Linux, and Windows are supported.  </p>\n<p>Now, lets take a look at what OS you have.  Please choose from the following for instructions on setting up Node.js:</p>\n<p>I have <a href="#install-on-osx">Mac OSX</a></p>\n<p>I have <a href="#install-on-linux">Linux</a></p>\n<p>I have <a href="#install-on-windows">Windows</a></p>\n<h2>\n<a id="install-on-osx" name="install-on-osx" class="anchor" href="#install-on-osx"><span class="mini-icon mini-icon-link"></span></a>\nInstall on OSX\n</h2>\n\n<p>Using <a href="http://nodejs.org/#download">a package</a>:</p>\n<p><em>Simply <a href="http://nodejs.org/#download">download Macintosh Installer</a>.</em></p>\n<p>Using <a href="https://github.com/mxcl/homebrew">homebrew</a>:</p>\n<pre><code>brew install node</code></pre>\n<p>Using <a href="http://www.macports.org/">macports</a>:</p>\n<pre><code>port install nodejs  </code></pre>\n<h2>\n<a id="install-on-linux" name="install-on-linux" class="anchor" href="#install-on-linux"><span class="mini-icon mini-icon-link"></span></a>\nInstall on Linux\n</h2>\n\n<h3>Ubuntu, Mint</h3>\n<p>Example install:</p>\n<pre><code>sudo apt-get install python-software-properties python g++ make\nsudo add-apt-repository ppa:chris-lea/node.js\nsudo apt-get update\nsudo apt-get install nodejs</code></pre>\n<p>It installs current stable Node on the current stable Ubuntu. Quantal (12.10) users may need to install the <em>software-properties-common</em> package for the <code>add-apt-repository</code> command to work: <code>sudo apt-get install software-properties-common</code></p>\n<p>As of Node.js v0.10.0, the nodejs package from <a href="https://chrislea.com/2013/03/15/upgrading-from-node-js-0-8-x-to-0-10-0-from-my-ppa/">Chris Lea</a>&#39;s repo includes both npm and nodejs-dev.</p>\n<p>There is a naming conflict with the node package (Amateur Packet Radio Node Program), and the nodejs binary has been renamed from <code>node</code> to <code>nodejs</code>. You&#39;ll need to symlink <code>/usr/bin/node</code> to <code>/usr/bin/nodejs</code> or you could uninstall the Amateur Packet Radio Node Program to avoid that conflict.</p>\n<h3>Fedora</h3>\n<p><a href="https://apps.fedoraproject.org/packages/nodejs">Node.js</a> and <a href="https://apps.fedoraproject.org/packages/npm">npm</a> are available in Fedora 18 and later.  Just use your favorite graphical package manager or run this on a terminal to install both npm and node:</p>\n<pre><code>sudo yum install npm</code></pre>\n<h3>RHEL/CentOS/Scientific Linux 6</h3>\n<p>Node.js and npm are available from the <a href="https://fedoraproject.org/wiki/EPEL">Fedora Extra Packages for Enterprise Linux (EPEL)</a> <em>testing</em> repository.  If you haven&#39;t already done so, first <a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F">enable EPEL</a> and then run the following command to install node and npm:</p>\n<pre><code>su -c &#39;yum --enablerepo=epel-testing install npm&#39;</code></pre>\n<h3>Arch Linux</h3>\n<p>Node.js is available in the Community Repository.</p>\n<pre><code>pacman -S nodejs</code></pre>\n<h3>Gentoo</h3>\n<p>Node.js is available in official gentoo portage tree. You have to unmask it.</p>\n<pre><code># emerge -aqv --autounmask-write nodejs\n# etc-update\n# emerge -aqv nodejs</code></pre>\n<h3>Debian, LMDE</h3>\n<p><a href="http://packages.debian.org/search?searchon=names&amp;keywords=nodejs">Node.js is available in official repo for Debian Sid(unstable)</a>.</p>\n<p>For Debian Squeeze, your best bet is to compile node by yourself (as <code>root</code>):</p>\n<pre><code>apt-get install python g++ make\nmkdir ~/nodejs &amp;&amp; cd $_\nwget -N http://nodejs.org/dist/node-latest.tar.gz\ntar xzvf node-latest.tar.gz &amp;&amp; cd `ls -rd node-v*`\n./configure\nmake install</code></pre>\n<h3>openSUSE &amp; SLE</h3>\n<p><a href="https://build.opensuse.org/package/show?package=nodejs&amp;project=devel%3Alanguages%3Anodejs">Node.js stable repos list</a>. Also node.js is available in openSUSE:Factory repository.</p>\n<p>Available RPM packages for: openSUSE 11.4, 12.1, Factory and Tumbleweed; SLE 11 (with SP1 and SP2 variations).</p>\n<p>Example install on openSUSE 12.1:</p>\n<pre><code>sudo zypper ar http://download.opensuse.org/repositories/devel:/languages:/nodejs/openSUSE_12.1/ NodeJSBuildService \nsudo zypper in nodejs nodejs-devel</code></pre>\n<h3>FreeBSD and OpenBSD</h3>\n<p>Node.js is available through the ports system.</p>\n<pre><code>/usr/ports/www/node</code></pre>\n<p>Development versions are also available using ports </p>\n<pre><code>cd /usr/ports/www/node-devel/ &amp;&amp; make install clean</code></pre>\n<p>or packages on FreeBSD</p>\n<pre><code>pkg_add -r node-devel</code></pre>\n<h2>\n<a id="install-on-windows" name="install-on-windows" class="anchor" href="#install-on-windows"><span class="mini-icon mini-icon-link"></span></a>\nInstall on Windows\n</h2>\n\n<p>Using <a href="http://nodejs.org/#download">a package</a>:</p>\n<p><em>Simply <a href="http://nodejs.org/#download">download Windows Installer</a>.</em></p>\n<p>Using <a href="http://chocolatey.org">chocolatey</a> to install <a href="http://chocolatey.org/packages/nodejs">Node</a>:  </p>\n<pre><code>cinst nodejs  </code></pre>\n<p>or for <a href="http://chocolatey.org/packages/nodejs.install">full install with NPM</a>:  </p>\n<pre><code>cinst nodejs.install</code></pre>\n<h2>On to Sails.js</h2>\n<p>Now that Node.js is installed on your system, we can move on to Sails.js.</p>\n<p>Click <a href="#!documentation/getting-started">here</a> to continue.</p>\n<h2>Futher help!</h2>\n<p>We know that sometimes things don&#39;t go as planned. If you still have any issue with this, please feel free to visit Node.js&#39;s <a href="irc://irc.freenode.net/node.js">IRC Channel</a> or our own <a href="irc://irc.freenode.net/sailsjs">IRC Channel</a>.</p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/policies.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs policies">\n<h1>Policies (ACL)</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>So, you don&rsquo;t want your mom to access your secret stash of ... code?  Here&#39;s how you can make that happen. </p>\n<h2>What Are Policies?</h2>\n<p>Policies in Sails are versatile tools for authorization and access control-- they let you allow or deny access to your controllers down to a fine level of granularity.  For example, if you were building Dropbox, before letting a user upload a file to a folder, you might check that she <code>isAuthenticated</code>, then ensure that she <code>canWrite</code> (has write permissions on the folder.)  Finally, you&#39;d want to check that the folder she&#39;s uploading into <code>hasEnoughSpace</code>.</p>\n<p>Policies can be used for anything: HTTP BasicAuth, 3rd party single-sign-on, OAuth 2.0, or your own custom authorization/authentication scheme.</p>\n<h2>Writing Your First Policy</h2>\n<p>Policies are files defined in the <code>api/policies</code> folder in your Sails app.  Each policy file should contain a single function.</p>\n<p>When it comes down to it, policies are really just Connect/Express middleware functions which run <strong>before</strong> your controllers.  You can chain as many of them together as you like-- in fact they&#39;re designed to be used this way.  Ideally, each middleware function should really check just <em>one thing</em>.</p>\n<p>For example, the <code>canWrite</code> policy mentioned above might look something like this:</p>\n<pre><code class="lang-javascript">// policies/canWrite.js\nmodule.exports = function canWrite (req, res, next) {\n  var targetFolderId = req.param(&#39;id&#39;);\n  var userId = req.session.user.id;\n\n  Permission\n  .findOneByFolderId( targetFolderId )\n  .exec( function foundPermission (err, permission) {\n\n    // Unexpected error occurred-- skip to the app&#39;s default error (500) handler\n    if (err) return next(err);\n\n    // No permission exists linking this user to this folder.  Maybe they got removed from it?  Maybe they never had permission in the first place?  Who cares?\n    if ( ! permission ) return res.redirect(&#39;/notAllowed&#39;);\n\n    // OK, so a permission was found.  Let&#39;s be sure it&#39;s a &quot;write&quot;.\n    if ( permission.type !== &#39;write&#39; ) return res.redirect(&#39;/notAllowed&#39;);\n\n    // If we made it all the way down here, looks like everything&#39;s ok, so we&#39;ll let the user through\n    next();\n  });\n};</code></pre>\n<h2>How do I protect my controllers with policies?</h2>\n<p>Sails has a built in ACL (access control list) located in <code>config/policies.js</code>.  This file is used to map policies to your controllers.  </p>\n<p>This file is  <em>declarative</em>, meaning it describes <em>what</em> the permissions for your app should look like, not <em>how</em> they should work.  Declarative programming has many benefits, but in particular, it is both conventional and adaptable.  This makes it easier for new developers to jump in and understand what&#39;s going on, plus it makes your app more flexible as your requirements inevitably change over time.</p>\n<p>You can apply one or more policies to a given controller or action.  Any file in your <code>/policies</code> folder (e.g. <code>authenticated.js</code>) is referable in your ACL (<code>config/policies.js</code>) by its filename minus the extension, (e.g.  <code>&#39;authenticated&#39;</code>).  </p>\n<p>Additionally, there are a few special, built-in policy mappings:\n  + <code>true</code>: public access  (allows anyone to get to the mapped controller/action)\n  +  <code>false</code>: <strong>NO</strong> access (allows <strong>no-one</strong> to access the mapped controller/action)</p>\n<p> <code>&#39;*&#39;: true</code> is the default policy for all controllers and actions.  In production, it&#39;s good practice to set this to <code>false</code> to prevent access to any logic you might have inadvertently exposed.</p>\n<h3>Here&rsquo;s an example of adding some policies to a controller:</h3>\n<pre><code class="lang-javascript">    RabbitController: {\n\n        // Apply the `false` policy as the default for all of RabbitController&#39;s actions\n        // (`false` prevents all access, which ensures that nothing bad happens to our rabbits)\n        &#39;*&#39;: false,\n\n        // For the action `nurture`, apply the &#39;isRabbitMother&#39; policy \n        // (this overrides `false` above)\n        nurture    : &#39;isRabbitMother&#39;,\n\n        // Apply the `isNiceToAnimals` AND `hasRabbitFood` policies\n        // before letting any users feed our rabbits\n        feed : [&#39;isNiceToAnimals&#39;, &#39;hasRabbitFood&#39;]\n    }</code></pre>\n<p>Here&rsquo;s what the <code>isNiceToAnimals</code> policy from above might look like: (this file would be located at <code>policies/isNiceToAnimals.js</code>)</p>\n<p>We&rsquo;ll make some educated guesses about whether our system will consider this user someone who is nice to animals.</p>\n<pre><code class="lang-javascript">module.exports = function isNiceToAnimals (req, res, next) {\n\n    // `req.session` contains a set of data specific to the user making this request.\n    // It&#39;s kind of like our app&#39;s &quot;memory&quot; of the current user.\n\n    // If our user has a history of animal cruelty, not only will we \n    // prevent her from going even one step further (`return`), \n    // we&#39;ll go ahead and redirect her to PETA (`res.redirect`).\n    if ( req.session.user.hasHistoryOfAnimalCruelty ) {\n        return res.redirect(&#39;http://PETA.org&#39;);\n    }\n\n    // If the user has been seen frowning at puppies, we have to assume that\n    // they might end up being mean to them, so we&#39;ll \n    if ( req.session.user.frownsAtPuppies ) {\n        return res.redirect(&#39;http://www.dailypuppy.com/&#39;);\n    }\n\n    // Finally, if the user has a clean record, we&#39;ll call the `next()` function\n    // to let them through to the next policy or our controller\n    next();\n};</code></pre>\n<h4>Besides protecting rabbits (while a noble cause, no doubt), here are a few other use cases for policies:</h4>\n<ul>\n<li>cookie-based authentication</li>\n<li>role-based access control</li>\n<li>limiting file uploads based on MB quotas</li>\n<li>any other kind of authentication scheme you can imagine</li>\n</ul>\n<h2>What about me?  I&#39;m using Passport?!</h2>\n<p>Passport works great with Sails!  In general, since Sails uses Connect/Express at its core, all of the Connect/Express-oriented things work pretty well.  In fact, Sails has no problem interpreting most Express middleware to work with socket.io.</p>\n<p>There are a few good examples of this floating around.  Here&#39;s a good one (hasn&#39;t been tested in v0.9.x yet):\n<a href="https://gist.github.com/theangryangel/5060446">https://gist.github.com/theangryangel/5060446</a></p>\n<p><a href="http://githalytics.com/balderdashy/sails/wiki/policies"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/pubsub.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs pubsub">\n<h1>Pubsub</h1>\n<blockquote>\n<p><em>Note: These docs are now for version 0.9.0 of Sails.  Please visit <a href="http://08x.sailsjs.org">here</a> for 0.8.x documentation.</em></p>\n</blockquote>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/roadmap.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs roadmap">\n<h1>Roadmap</h1>\n<p>What&#39;s next?</p>\n<h2>Sails Core</h2>\n<h4>Streaming File Uploads/Downloads</h4>\n<blockquote>\n<p>Update: This is finished and packaged as separate modules, just not in core yet.</p>\n</blockquote>\n<p>Express&#39;s default support for file uploads via formidable is not suitable for production apps with large file uploads (&gt;100MB)\n  + Built-in, friendly support for streaming file uploads using Waterline&#39;s adapters which implements the binary-stream interface\n  + (i.e. you can&#39;t buffer 100GB uploads to disk)\n  + Use formidable&#39;s onPart event to process file uploads\n  + Everything else should be handle by formidable&#39;s built-in parser</p>\n<h4>Logging</h4>\n<p>Pull out Sails.log (winston wrapper) as a separate module so it can be used by waterline</p>\n<h4>Sessions</h4>\n<p>Create generic sails-session adapter to allow any sails CRUD adapter to be used as a session store. then add config</p>\n<h4>Plugins</h4>\n<p>Document the plugin (hook) system</p>\n<h2>CLI / Generators</h2>\n<p>Pull out CLI as a separate module so that it can develop in parallel- investigate <code>yo</code> integration for generators</p>\n<h2>Gruntfile</h2>\n<ul>\n<li>Pull out Gruntfile as a separate module so that it can develop in parallel- investigate integration with CLI for so that the proper generators <code>yo</code> integration for generators</li>\n<li>Provide public access to templates for async loading by default (it&#39;s totally possible to do this now, but let&#39;s make it easier)</li>\n</ul>\n<h2>Waterline (ORM)</h2>\n<blockquote>\n<p>Associations are coming along nicely</p>\n</blockquote>\n<ul>\n<li>Associations (cross-model, cross-adapter)</li>\n<li>Transactions (cross-model, cross-adapter)</li>\n</ul>\n<h2>Adapters</h2>\n<ul>\n<li>Document the adapter interface support matrix for Disk, MySQL, PostgreSQL, Mongo, and Redis</li>\n<li>SMTP Adapter (<code>send</code>)</li>\n<li>S3 Adapter (<code>upload</code>, <code>download</code>)</li>\n</ul>\n<h2>Community</h2>\n<ul>\n<li>Examples / articles</li>\n<li>Backbone works with Sails out of the box with Sails blueprints (no code required), but let&#39;s create a Backbone.sync override for taking advantage of comet messaging (based on the existing Backbone -&gt; Socket.io SDK)</li>\n<li>Improve the Angular -&gt; Socket.io SDK</li>\n<li>Create an example of a TemplateController which allows you to load your templates asynchronously from the client.</li>\n</ul>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/routes.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs routes">\n<h1>Routes</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>This table routes urls to controllers/actions.</p>\n<h2>Resourceful Routing</h2>\n<p>If the URL is not specified in <code>config/routes.js</code>, the default route for a URL is:\n<code>/:controller/:action/:id</code>\nwhere <code>:controller</code>, <code>:action</code>, and the <code>:id</code> request parameter are derived from the url</p>\n<p>If <code>:action</code> is not specified, Sails will redirect to the appropriate action.  Out of the box,\nSails supports RESTful resourceful route conventions, as used in Backbone.js.</p>\n<pre><code>    # Backbone Conventions\n    GET   :    /:controller            =&gt; findAll()\n    GET   :    /:controller/read/:id        =&gt; find(id)\n    POST  :    /:controller/create        =&gt; create()\n    POST  :    /:controller/create/:id        =&gt; create(id)\n    PUT   :    /:controller/update/:id        =&gt; update(id)\n    DELETE:    /:controller/destroy/:id    =&gt; destroy(id)\n\n    # You can also explicitly state the action\n    GET   :    /:controller/find        =&gt; findAll()\n    GET   :    /:controller/find/:id        =&gt; find(id)\n    POST  :    /:controller/create        =&gt; create(id)\n    PUT   :    /:controller/update/:id        =&gt; update(id)\n    DELETE:    /:controller/destroy/:id    =&gt; destroy(id)</code></pre>\n<p>If the requested controller/action doesn&#39;t exist:\n  - if a view exists ( <code>/views/:controller/:action.ejs</code>), Sails will render that view\n  - if no view exists, but a model exists, Sails will automatically generate a JSON API for the \n      model which matches <code>:controller</code>.\n  - if no view OR model exists, Sails will respond with a 404.</p>\n<h2>Custom Routes</h2>\n<p>You can define your own custom routes in <code>config/routes.js</code></p>\n<pre><code class="lang-javascript">module.exports.routes = {\n    // To route the home page to the &quot;index&quot; action of the &quot;home&quot; controller:\n    &#39;/&#39;: {\n        controller: &#39;home&#39;\n    },\n\n    // Additional routes might look like:\n    &#39;/whateverYouWant&#39;: {\n        controller: &#39;someController&#39;,\n        action: &#39;someAction&#39;\n    },\n\n    // If you want to set up a route only for a particular HTTP method/verb \n    // (GET, POST, PUT, DELETE) you can specify the verb before the path:\n    &#39;post /signup&#39;: {\n        controller: &#39;auth&#39;,\n        action: &#39;signup&#39;\n    }\n\n    // Keep in mind default routes exist for each of your controllers\n    // So if you have a UserController with an action called &quot;juggle&quot; \n    // a route will be automatically exist mapping it to /user/juggle.\n    //\n    // Additionally, unless you override them, new controllers will have \n    // create(), find(), update(), and destroy() actions, \n    // and routes will exist for them as follows:\n\n    /*\n\n    // Standard RESTful routing\n\n    // If no id is given, an array of all users will be returned\n    &#39;get /user/:id?&#39;: {\n        controller    : &#39;user&#39;,\n        action        : &#39;find&#39;\n    }\n    &#39;post /user&#39;: {\n        controller    : &#39;user&#39;,\n        action        : &#39;create&#39;\n    }\n    &#39;put /user/:id&#39;: {\n        controller    : &#39;user&#39;,\n        action        : &#39;update&#39;\n    }\n    &#39;delete /user/:id&#39;: {\n        controller    : &#39;user&#39;,\n        action        : &#39;destroy&#39;\n    },\n\n    // Override the default index action (find) by declaring an &quot;index&quot; method in your controller\n    &#39;get /user&#39;: {\n        controller    : &#39;user&#39;,\n        action        : &#39;index&#39;\n    }\n\n    */\n};</code></pre>\n<h2>Wildcard Routes</h2>\n<p>Wildcard routes can also be defined in <code>config/routes.js</code>.  If say for example, you want all unknown routes (routes that aren&#39;t real) to point to a specific controller and action.  Then you can use the <code>:unkownRoute</code> arbitrary variable as the route.  An example of this is shown below.</p>\n<pre><code class="lang-javascript">// config/routes.js\n\nmodules.exports.routes = {\n  &#39;/some/route&#39;: {\n    controller: &#39;something&#39;,\n    action: &#39;foo&#39;\n  },\n\n  // Wildcard (404) handler\n  &#39;/:unknownRoute&#39;: {\n    controller: &#39;notfound&#39;\n    action: &#39;index&#39;\n  }\n};</code></pre>\n<p>Arbitrary variables will take any value that is put in the router and pass it down to the controller and action you specify.</p>\n<p>Another example, if say you want the route as the username of a user on your system, you could do the following.</p>\n<pre><code class="lang-javascript">  &#39;/:username&#39;: {\n    controller: &#39;user&#39;,\n    action: &#39;profile&#39;\n  }</code></pre>\n<p>and in your controller,</p>\n<pre><code class="lang-javascript">module.exports = {\n  profile: function (req,res) {\n    var username = req.param(&#39;username&#39;);\n    User.findByUsername(username).done(function (err, user) {\n       if (err) return res.send(err,500);\n       res.view({ user: user });\n    });\n  }\n\n};</code></pre>\n<p>This setup will allow UserA to visit <a href="http://yoursite.com/UserA">http://yoursite.com/UserA</a> and depending on your view, may see their profile page.</p>\n<p><a href="http://githalytics.com/balderdashy/sails/wiki/routes"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/services.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs services">\n<h1>Services</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>Alright. Close your eyes, and take a deep breath. You are on a beautiful torpical island, in the middle of the ocean.\nThe sun bathes you in its warm glow as you stare out at the horizon. The waves splash calmly on the shore, just inches\naway from where you stand. You feel the warm soft sand under your feet. The ocean beeze washes over you, as you then realize that you need services.</p>\n<h2>What are services?</h2>\n<p>Services are basically libraries, which contain functions that you might want to use in many places of your application. \nFor example, you might have an EmailService which wraps some default email message boilerplate code that you would want to use in many parts of your application. </p>\n<h2>How to I create a service?</h2>\n<p>An email service might look something like this:</p>\n<pre><code class="lang-javascript">// EmailService.js - in api/services\nexports.sendInviteEmail = function(options) {\n\n    var opts = {&quot;type&quot;:&quot;messages&quot;,&quot;call&quot;:&quot;send&quot;,&quot;message&quot;:\n        {\n            &quot;subject&quot;: &quot;YourIn!&quot;,\n            &quot;from_email&quot;: &quot;info@balderdash.co&quot;,\n            &quot;from_name&quot;: &quot;AmazingStartupApp&quot;,\n            &quot;to&quot;:[\n                {&quot;email&quot;: options.email, &quot;name&quot;: options.name}\n            ],\n            &quot;text&quot;: &quot;Dear &quot;+options.name+&quot;,\\nYou&#39;re in the Beta! Click &lt;insert link&gt; to verify your account&quot;\n        }\n    };\n\n    myEmailSendingLibrary.send(opts);\n};</code></pre>\n<p>Services are automatically exposed by Sails to the rest of your application.</p>\n<pre><code class="lang-javascript">// Somewhere in a conroller\n  EmailService.sendInviteEmail({email: &#39;test@test.com&#39;, name: &#39;test&#39;});</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/sockets.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs sockets">\n<h1>Sockets / Pubsub</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h2>Contents</h2>\n<p>Sails makes HTTP and Socket.io interoperable, making it easier than ever to add realtime/pubsub/comet functionality to your app.</p>\n<ol>\n<li><p>Using standard controllers</p>\n</li>\n<li><p>Using the CRUD blueprints</p>\n</li>\n<li><p>Using the built-in realtime <em>sync</em> methods (e.g. <code>User.publishCreate()</code>)</p>\n</li>\n<li><p>Using Sails built-in low-level pubsub/socket methods (e.g. <code>req.listen</code>, <code>User.subscribers</code>)</p>\n</li>\n<li><p>Obtaining raw access to socket.io via <code>req.socket</code> and <code>sails.io</code></p>\n</li>\n</ol>\n<h2>Using standard controllers</h2>\n<p>Out of the box, Sails handles Socket.io requests the same way it handles HTTP requests-- through the Express interface.  It does this by creating a fake Express request and automatically routing the socket requests to the proper controller and action.  For instance, here is a simple controller:</p>\n<pre><code class="lang-javascript">// api/controllers/EchoController.js\n\nmodule.exports = {\n  index: function (req,res) {\n    // Get the value of a parameter\n    var param = req.param(&#39;message&#39;);\n\n    // Send a JSON response\n    res.json({\n      success: true,\n      message: param\n    });\n  }\n};</code></pre>\n<p>From an HTML page, we can access our controller like so:</p>\n<pre><code class="lang-javascript">// socket is globalized by sails\nsocket.get(&#39;/echo&#39;,{\n  message: &#39;hi there!&#39;\n}, function (response) {\n  // response === {success: true, message: &#39;hi there!&#39;}\n});</code></pre>\n<p>In controllers, when handling a socket request, req and res are automatically set up to take the appropriate actions using Socket.io instead of Express. If you need it, <code>req.socket</code> contains a raw reference to the underlying socket.io socket.  If you ever need to access it directly, you can do so.  But for the majority of use cases, using Sails&#39; built-in behavior will keep your syntax simple and conventional.</p>\n<h2>Using CRUD Blueprints</h2>\n<p>The default blueprint API supports pubsub for socket requests out of the box.  So for instance if you create a model called User, then send a socket.io message to the server from the client requesting a list of users, the client will be automatically subscribed to changes to the users collection for the remainder of the connection:</p>\n<blockquote>\n<p><code>socket.get()</code>, <code>socket.post()</code>, etc. are methods available in the client-side SDK included in new Sails projects.  In this example, we&#39;ll use them to talk to the backend via Socket.io.  Please be aware that you can use these methods whether or not you&#39;re using CRUD blueprints.</p>\n</blockquote>\n<pre><code class="lang-javascript">socket.get(&#39;/user&#39;, function (response) {\n  // response contains a list of all users\n});\nsocket.post(&#39;/user&#39;,{name: &#39;foo&#39;}, function (response) {\n  // create a new user\n});\nsocket.put(&#39;/user/1&#39;,{name: &#39;foobar&#39;}, function (response) {\n  // update the user\n});\nsocket.delete(&#39;/user/1&#39;, function (response) {\n  // delete the user\n});</code></pre>\n<p>These calls will subscribe you to changes to the model, see your <code>assets/js/app.js</code> file to see default socket setup.</p>\n<h2>Using built-in pubsub methods</h2>\n<p>Sails exposes some convenient accessor methods for performing common publish/subscribe operations.  The following methods may be used in your custom controllers to give you lower-level access to the same kind of realtime functionality you&#39;ve seen in the blueprints.</p>\n<p>Under the covers, Sails blueprints work their realtime magic by automatically furnishing models with a collection-wide &quot;class room&quot; and an &quot;instance room&quot; for each instance.  </p>\n<h3><code>Model.subscribe( req.socket )</code></h3>\n<h5>The &quot;class room&quot;</h5>\n<p>If you have a visitor whose socket is subscribed to the &quot;class room&quot; (e.g. <code>User.subscribe( req.socket )</code>), she&#39;ll receive messages <em>any time</em> <code>User.publishCreate()</code> is called.  </p>\n<p>Subscribe the request object&#39;s socket (<code>req.socket</code>) to this model&#39;s class room.\nYour subscribed socket on the client will receive a message every time a new instance of the specified model is created.  Any time <code>publishCreate</code> is called, sockets subscribed to the class room are automatically subscribed to newly created models&#39; instance rooms (more on that below).</p>\n<p>e.g. <code>User.subscribe( req.socket )</code></p>\n<h3><code>Model.subscribe( req.socket, model[s] )</code></h3>\n<h5>&quot;instance rooms&quot;</h5>\n<p>If the visitor is subscribed to one or more &quot;instance rooms&quot; (e.g. <code>User.subscribe( req.socket, listOfUserInstances )</code> ), she&#39;ll receive messages when <code>User.publishUpdate()</code> or <code>User.publishDestroy()</code> is called involving one of the instances she cares about.</p>\n<p>Subscribe the request object&#39;s socket (<code>req.socket</code>) to the specified model, id OR array of <code>models</code> or ids.  Subscribed sockets will receive a message every time the specified model(s) are updated or destroyed from here on out.</p>\n<p>e.g. \n+ <code>User.subscribe(req.socket , [7, 3] )</code>\n+ <code>Player.subscribe(req.socket , todaysLuckyGuests )</code>\n+ <code>User.subscribe(req.socket , req.session.userId )</code>\n+ <code>Product.subscribe(req.socket, saleItems )</code></p>\n<!-- TODO -->\n<!-- \n\n# Coming soon:\n\n### req.socket.watch( model[s] )\nWatch the specified array of `models` or single model with this socket (`req.socket`).  Your socket on the client will receive a message every time the specified user(s) are updated or destroyed.\ne.g. `req.socket.watch( [ {id: 7} ] )`\n\n### req.socket.subscribeTo( Model )\nSubscribe the request object\'s socket (`req.socket`) to the collection\'s class room.  In the example below, our user\'s socket will receive a message in their browser every time a new user is **created**.\n\nNote: If a socket is subscribed to creates, it will also be automatically subscribed to update and destroy events for any new instances.\n\ne.g. `req.socket.subscribeTo( User );\n\n-->\n\n\n<blockquote>\n<p>IMPORTANT NOTE: <code>Model.subscribe( req.socket, [])</code> is not the same as <code>Model.subscribe( req.socket )</code>.  The latter usage will subscribe to the &quot;class room.&quot;  The former will subscribe to nothing!  This is because the presence of the second argument (in this case the empty list <code>[]</code>) signals to Sails that you&#39;re subscribing to instances, but in this case you&#39;ve specified none!</p>\n</blockquote>\n<h3><code>Model.publishCreate( values, [socketToOmit] )</code></h3>\n<p>Inform all sockets who are members of the &quot;class room&quot; for <code>Model</code> that a new instance has been created.  Those sockets will also be automatically subscribed to the new instance&#39;s room.</p>\n<p>Optionally, if <code>socket</code> argument is specified, it will be omitted from the broadcast.</p>\n<pre><code class="lang-javascript">// For example\nUser.publishCreate({\n  id: 3,\n  name: &#39;Randy&#39;\n})</code></pre>\n<p>Client-side sockets who were subscribed to the class room and are listening to the <code>message</code> event would receive a JSON message like the following:</p>\n<pre><code class="lang-javascript">{\n  data: {\n    id: 3,\n    name: &#39;Randy&#39;\n  }\n  id: 3\n  model: &#39;user&#39;\n  verb: &#39;create&#39;\n}</code></pre>\n<h3><code>Model.publishUpdate( id, values, [socketToOmit] )</code></h3>\n<p>Inform all sockets who are subscribed to the specified <code>id</code>&#39;s instance room for <code>Model</code> that the instance has been updated. </p>\n<p>Optionally, if <code>socket</code> argument is specified, it will be omitted from the broadcast.</p>\n<pre><code class="lang-javascript">// For example\nUser.publishUpdate( 7, {\n  name: &#39;Amanda&#39;\n});</code></pre>\n<p>Client-side sockets who were subscribed to the class room and are listening to the <code>message</code> event would receive a JSON message like the following:</p>\n<pre><code class="lang-javascript">{\n  data: {\n    name: &#39;Amanda&#39;\n  }\n  id: 7\n  model: &#39;user&#39;\n  verb: &#39;update&#39;\n}</code></pre>\n<h3><code>Model.publishDestroy( id, [socketToOmit] )</code></h3>\n<p>Inform all sockets who are subscribed to the specified <code>id</code>&#39;s instance room for <code>Model</code> that the instance has been destroyed. </p>\n<p>Optionally, if <code>socket</code> argument is specified, it will be omitted from the broadcast.</p>\n<pre><code class="lang-javascript">// For example\nUser.publishDestroy(7);</code></pre>\n<p>Client-side sockets who were subscribed to the class room and are listening to the <code>message</code> event would receive a JSON message like the following:</p>\n<pre><code class="lang-javascript">{\n  id: 7\n  model: &#39;user&#39;\n  verb: &#39;destroy&#39;\n}</code></pre>\n<h2>Using low-level pubsub/socket methods</h2>\n<h3><code>Model.unsubscribe( req.socket, model[s] )</code></h3>\n<p>Unsubscribe the request object&#39;s socket (<code>req</code>) from the specified <code>models</code>\ne.g. <code>User.unsubscribe(req.socket,[{id: 7}, {id: 2}])</code></p>\n<h3><code>Model.introduce( req.socket, id )</code></h3>\n<p>Take all of the class room models and &#39;introduce&#39; them to a new instance room\n(good for when a new instance is created-- connecting sockets must subscribe to it)\ne.g. <code>User.introduce(req.socket,3)</code></p>\n<h3><code>Model.publish( req.socket, models, message )</code></h3>\n<p>Broadcast a <code>message</code> to sockets connected to the specified <code>models</code> using the request object (<code>req</code>).\ne.g. <code>User.publish(req,[{id: 7},{id: 2}], {latitude: 31.2325, longitude: 22.1135})</code></p>\n<h3><code>Model.room( id )</code></h3>\n<p>Return the room name for the instance in this collection with the given id\nIf id is null, return the name of the &quot;class&quot; or collection-wide room (for listening to <code>create</code>s)\ne.g. <code>User.room(3)</code></p>\n<h3><code>Model.subscribers( id )</code></h3>\n<p>Return the set of sockets subscribed to this instance (if id specified) or class room (if it&#39;s not)\ne.g. <code>User.subscribers(7)</code></p>\n<p>See <a href="https://github.com/balderdashy/sails/blob/master/lib/hooks/pubsub/index.js">https://github.com/balderdashy/sails/blob/master/lib/hooks/pubsub/index.js</a> for implementation details.</p>\n<h5><code>req.listen(room)</code></h5>\n<p>Subscribe the current socket to broadcasts from the specified room\ne.g. <code>req.listen(&#39;off the wall chats&#39;)</code></p>\n<h2>Still need more control?</h2>\n<p>If you need more precise functionality, the raw Socket.io API is pretty straightforward to figure out. You can read more here: <a href="http://socket.io/#how-to-use">http://socket.io/#how-to-use</a></p>\n<p>The root Socket.io object is available globally in Sails via <code>sails.io</code>.  You can also access the currently connected socket in the request object, via <code>req.socket</code> in your controllers.</p>\n<h2>FAQ</h2>\n<h3>500 error: &quot;handshake error&quot; returned from socket.io request</h3>\n<p>This is most likely because you don&#39;t have any express cookies yet in your current session and are requesting from a domain other than your server. To alleviate this and prevent the error from cropping back up, you should build in some kind of request to your server BEFORE you initialize your socket.io connection. So, if you&#39;re using Mast, something like this on your client side:</p>\n<pre><code class="lang-javascript">// location of your server\nurl = &quot;http://localhost:1337/&quot;\n// dummy request to the server, retrieves cookie. using jQuery, you can use whatever\n$.get(url, function() {})\n// NOW setup socket.io\nMast.raise({ baseurl : url })</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/translation.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs translation">\n<h1>Translation (i18n)</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<h2>Locale</h2>\n<p>All locale files live under <code>config/locales</code>. Here is where you can add locale data as JSON key-value pairs. The name of the file should match the language that you are supporting, which allows for automatic language detection based on the user request.\nHere is an example locale file (<code>config/locales/es.json</code>):  </p>\n<pre><code class="lang-json">{\n    &quot;Hello!&quot;: &quot;Hola!&quot;,\n    &quot;Hello %s, how are you today?&quot;: &quot;¿Hola %s, como estas?&quot;,\n}</code></pre>\n<h2>Usage</h2>\n<p>Locales can be accessed through either <code>res.i18n()</code>, or in views through the <code>i18n()</code> function.\nRemember that the keys are case sensitive and require exact key matches.\ne.g.:</p>\n<pre><code class="lang-ejs">&lt;h1&gt; &lt;%= i18n(&#39;Hello!&#39;) %&gt; &lt;/h1&gt;\n&lt;h1&gt; &lt;%= i18n(&#39;Hello %s, how are you today?&#39;, &#39;Mike&#39;) %&gt; &lt;/h1&gt;</code></pre>\n<h2>config</h2>\n<p>Locale config can be found in <code>config/i18n.js</code>, from which you can set your supported locales:</p>\n<pre><code class="lang-javascript">// Which locales are supported?\nlocales: [&#39;en&#39;, &#39;es&#39;],\n\n// Where are your locale translations located?\nlocalesDirectory: &#39;/config/locales&#39;</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/docs/views.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="docs views">\n<h1>Views</h1>\n<blockquote>\n<p><em><strong>Note:</strong> You are viewing the Sails.js v0.9.0 documentation.  If you&#39;re looking for information on v0.8.x, please visit <a href="http://08x.sailsjs.org">here</a>.</em></p>\n</blockquote>\n<p>There are three kinds of views in Sails. There are traditional view partials, view templates, and\nthe layout.</p>\n<h2>What is a View?</h2>\n<p>In Sails a view is the representation of the UI of your application. Views are, by default, EJS (<a href="http://embeddedjs.com/">Embedded JavaScript</a>) files. \nSails uses EJS, or its other configurable templating libraries, to present your app&#39;s data as HTML. Sails allows you to create templates that are injected into the DOM. \nWith this, all you ever have to respond with is JSON objects in your controllers, creating a truly API-driven application.</p>\n<h2>Where do I define Views?</h2>\n<p>Traditional views are defined in the <code>/views/</code> directory while templates are defined in the \n<code>/assets/templates/</code> directory.</p>\n<h2>Server-side Views, Layout, and View Partials</h2>\n<p>Server-side views in the <code>/views/</code> directory are by default EJS files that will handle the job\nof presenting data when a view requested by the client. The method <code>res.view()</code> call will\nrespond to a client with the appropriate view.</p>\n<p>Here&#39;s an example of a view (views/corndog/index.ejs) that consumes some data sent down from a controller:</p>\n<pre><code class="lang-html">&lt;div&gt;\n  &lt;h1&gt;My first view&lt;/h1&gt;\n\n  &lt;h2&gt;My corndog collection:&lt;/h2&gt;\n  &lt;ul&gt;\n    &lt;% _.each(corndogs, function (corndog) { %&gt;\n    &lt;li&gt;&lt;%= corndog.name %&gt;&lt;/li&gt;\n    &lt;% }) %&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n<p>And here&#39;s what the controller looks like:</p>\n<pre><code class="lang-javascript">    var CorndogController = {\n\n        index: function(req, res) {\n            return res.view({\n                corndogs: [{name: &#39;Hank the Corndog&#39;}, {name: &#39;Lenny the Corndog&#39;}]\n            });\n        }\n    }\n    module.exports = CorndogController;</code></pre>\n<p>If you need to override a layout for a specific view, you can do so in the res.view call as below:</p>\n<pre><code class="lang-javascript">res.view({\n  layout: &quot;different_layout&quot;\n})</code></pre>\n<p>This could be called from any controller output.</p>\n<h2>View Partials</h2>\n<p>Partials are just like they sound.  A View Partial is only a small part of the overall DOM that you see on your web application.  With that said, a partial is nothing more than another (smaller) EJS file. Lets take a look at a partial from the Sails example, and how we should include it from another EJS file.</p>\n<h4><code>/views/site/partials/footer.ejs</code></h4>\n<pre><code class="lang-html">&lt;footer&gt;\n    &lt;span&gt;\n        &lt;div class=&quot;float-right&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;float-left&quot;&gt;\n            Balderdash &amp;copy; 2013\n        &lt;/div&gt;\n        &lt;div class=&quot;clearfix&quot;&gt;\n        &lt;/div&gt;\n    &lt;/span&gt;\n&lt;footer&gt;</code></pre>\n<p>As you can see, this is nothing more than a simple EJS file.  Nothing special, nothing magical.</p>\n<p>Now, lets call it from our index file.</p>\n<h4><code>/views/site/index.ejs</code></h4>\n<pre><code class="lang-html">&lt;%- partial(&#39;partials/header&#39;)%&gt;\n&lt;%- partial(&#39;partials/page&#39;)%&gt;\n&lt;%- partial(&#39;partials/footer&#39;) %&gt;</code></pre>\n<p>Boring you say?  Well, maybe.  We don&#39;t have a lot in our index.ejs file, but thats because we don&#39;t need a lot.  We call the partials for the site we need to include.  Simply calling a partial by relative path will have it included at runtime.  This makes our code base very clean and easy to read.</p>\n<p>Something a little more complicated?  Sure!  We&#39;ll do a 2 level partial this time.  Using our same index.ejs file lets take a look at the &quot;page&quot; partial.</p>\n<h4><code>/views/site/partials/page.ejs</code></h4>\n<pre><code class="lang-html">&lt;section id=&quot;section1&quot;&gt;\n    &lt;span&gt;\n        &lt;%- partial(&#39;sections/about&#39;)%&gt;\n    &lt;/span&gt;\n&lt;/section&gt;\n&lt;section id=&quot;section2&quot;&gt;\n    &lt;span&gt;\n        &lt;%- partial(&#39;sections/blog&#39;)%&gt;\n    &lt;/span&gt;\n    &lt;span&gt;\n        &lt;%- partial(&#39;sections/chat&#39;)%&gt;\n    &lt;/span&gt;\n    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;\n&lt;/section&gt;</code></pre>\n<p>Still simple, but whats this? We are now including other partials from within our partial?  YES! that is exactly what we are doing.  From what you can see now... we can create a hierarchical system of partials that make it easy to navigate through the files for designers.</p>\n<p>Lets take a look at the &quot;about&quot; section.  Since we are dealing with HTML5, we like to name the folders that the partials are held in accordingly.  Why? because it just makes sense!</p>\n<h4><code>/views/site/partials/sections/about.ejs</code></h4>\n<pre><code class="lang-html">&lt;p&gt;\nSailsJS is built on NodeJS for easily building fast, scalable network applications. SailsJS provides a MVC framework perfect for data-intensive real-time applications that run across distributed devices.  SailsJS provides a JSON API right out of the box.&lt;br&gt;\n&lt;br&gt;\nCurrent Version: v0.8.82\n&lt;/p&gt;</code></pre>\n<p>Lets look at this a bit now.  We just included a partial from within another partial.  We can use relative pathing to include and because our <strong>/views/site/partials/page.ejs</strong> page and <strong>/views/site/partials/sections</strong> folder are at the same level in the file system, relative pathing is easy to use.  Simple right?  We thought so, too.</p>\n<p>We have a structure that we prefer to use for partials to make things easy to read.  This is by no means a &quot;have-to-use&quot; structure, but we do suggest it, as it is our standard.</p>\n<pre><code class="lang-text">PROJECT FOLDER\n└── views\n    ├── 401.ejs\n    ├── 404.ejs\n    ├── layout.ejs\n    └── &lt;controller&gt;\n        ├── index.ejs\n        ├── &lt;action&gt;.ejs\n        └── partials\n            ├── footer.ejs\n            ├── header.ejs\n            ├── page.ejs\n            └── sections\n                ├── about.ejs\n                ├── blog.ejs\n                └── chat.ejs</code></pre>\n<p>This layout makes it really simple to navigate and keep things organized.</p>\n<h2>View Engine Configuration</h2>\n<p>One of the benefits of Sails is flexability.  Sails&#39; views system allows for other templating engines than the default (EJS).  The Jade Node Template Engine is available for use as well.  Just install it via <em>npm</em> and just change the engine in <strong>/config/views.js</strong>, or use <code>sails new appname --template=jade</code> for new projects.</p>\n<h2>What about using multiple layouts?</h2>\n<p>Express 3 removed native support for layouts.  In Sails, we&#39;ve managed to keep this around, but we don&#39;t officially support multiple layouts.</p>\n<p>That said, at least in EJS, instead of indicating your custom layout with the <code>layout</code> local,\nyou must use <code>_layoutFile</code>:</p>\n<pre><code class="lang-javascript">res.view({\n  _layoutFile: &#39;relativePathToYourCustomLayoutFromTheTargetView.ejs&#39;\n});</code></pre>\n<p>The path to the layout you&#39;re wanting to use should be specified  <strong>relative</strong> to the view you&#39;re rendering.</p>\n<p>So if you&#39;re in the create action of the UserController, rendering a view (<code>views/user/create.ejs</code>), the relative path to your custom layout might be: <code>../staticSiteLayout.ejs</code></p>\n<pre><code class="lang-text">PROJECT FOLDER\n└── views\n    ├── staticSiteLayout.ejs\n    ├── layout.ejs\n    └── user\n        └── create.ejs</code></pre>\n\n</div>';

}
return __p
};

this["JST"]["assets/templates/pages/DocumentationPage.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="documentation guide">\n\n  <!-- HANDSET AND PORTRAIT TABLET STYLES: -->\n  <!-- END HANDSET AND PROTRAIT TABLET STYLES -->\n\n  <!-- <div class="clearfix"> -->\n    <region default="Subnavigation" class="subnav-region"></region>\n    <region data-id="embeddedSection" class="embedded-region" default="new-to-nodejs"></region>\n  <!-- </div> -->\n\n  <div class="mobile-docs">\n    <img src="/images/image_devInTub.png" class="devs-in-tub" />\n\n    <div class="github-content">\n      <div class="button">\n        <a href="https://github.com/balderdashy/sails-wiki">View our Github</a>\n      </div>\n      <span>Please visit our Sails wiki to view the docs on your mobile device.</span>\n    </div>\n  </div>\n</div>\n';

}
return __p
};

this["JST"]["assets/templates/pages/GetStartedPage.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="get-started sails-get-started guide">\n  <div class="container clearfix">\n    <div class="description">\n      <h1>Get Started</h1>\n      <p>\n      We\'ve worked really hard to make this as simple as possible.\n      </p>\n      <p>\n      Just install Sails.js, create a new project, and then lift your server.\n      </p>\n      <img src="/images/image_devInTub.png" />\n    </div>\n    <region default="getting-started"></region>\n  </div>\n  <div class="bottom-waves"></div>\n  <div class="sails-love">\n    <div class="container clearfix">\n      <div class="built">\n        <region default="Love"></region>\n      </div>\n      <ul class="footer-nav">\n        <li><a class="balloon" href="#!">Home</a></li>\n        <li><a class="balloon" href="#!getStarted">Get started</a></li>\n        <li><a class="balloon" href="#!documentation">Documentation</a></li>\n        <li>\n          <a class="balloon" target="_blank" href="http://michaelmcneil.com">Blog</a>\n        </li>\n        <li>\n          <a target="_blank" href="http://sails.mit-license.org/">\n          <span>License</span>\n          </a>\n        </li>\n      </ul>\n      <span class="c-mobile">&copy; 2012-2013 Sails.js. All Rights Reserved</span>\n    </div>\n  </div>\n  <div class="bottom">\n    <div class="sharing container clearfix">\n      <div class="star">\n        <iframe src="http://ghbtns.com/github-btn.html?user=balderdashy&amp;repo=sails&amp;type=watch&amp;count=true"\n        allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20">\n        </iframe>\n      </div>\n      <div class="addthis_toolbox addthis_default_style">\n        <a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>\n      </div>\n      <div class="addthis_toolbox addthis_default_style ">\n        <a class="addthis_button_tweet"></a>\n      </div>\n      <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=xa-51439c1933b12a9f"></script>\n    </div>\n  </div>\n</div>\n';

}
return __p
};

this["JST"]["assets/templates/pages/HomePage.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="home-page">\n  <div class="banner">\n    <div class="container">\n      <div class="tagline mobile">\n        <h2>The Web Framework of Your Dreams.</h2>\n        <h3>Designed for developers by Giant Squid.</h3>\n        <a href="#!getStarted" class="button">Get started</a>\n      </div>\n      <div class="star">\n        <iframe src="http://ghbtns.com/github-btn.html?user=balderdashy&amp;repo=sails&amp;type=watch&amp;count=true"\n      allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>\n      </div>\n    </div>\n  </div>\n  <div class="sails-what">\n    <div class="container clearfix">\n      <div class="what-is-sails">\n        <h1>What Is Sails.js?</h1>\n        <p>\n        Sails.js make it easy to build custom, enterprise-grade Node.js apps. It is designed to mimic the MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with scalable, service-oriented architecture. It\'s especially good for building chat, realtime dashboards, or multiplayer games.\n        </p>\n      </div>\n      <div class="video-mobile">\n        <h2>Watch the intro video\n        <a href="http://www.youtube.com/watch?v=GK-tFvpIR7c&amp;feature=player_embedded">here</a>.\n        </h2>\n      </div>\n      <div class="video">\n        <iframe src="http://www.youtube.com/embed/GK-tFvpIR7c" frameborder="0" allowfullscreen></iframe>\n      </div>\n    </div>\n  </div>\n  <div class="sails-features">\n    <div class="container clearfix">\n      <div class="features">\n        <h1>Features</h1>\n        <p>\n        Using Sails.js cuts development time into a fraction of what it used to be. You can build production-ready, realtime apps in a matter of weeks - not months!\n        </p>\n      </div>\n      <div class="feature-list">\n        <h3>Sails.js does a few things other Node.js MVC frameworks can\'t do:</h3>\n        <ul>\n          <li>\n            <p>\n            Sails.js is database agnostic. Its ORM, Waterline, provides a simple data access\n            layer that works, no matter what database you\'re using. All you have to do is plug in\n            one of the adapters written by our community. If you\'re plugging into an unusual or\n            proprietary system, it\'s easy to write your own adapter!\n            </p>\n          </li>\n          <li>\n            <p>\n            Sails.js automatically generates a RESTful JSON API for your app. That means you don\'t\n            have to write any backend code to build simple database apps.\n            </p>\n          </li>\n          <li>\n            <p>\n            Realtime Socket.io requests are routed to your controllers the same way as everything\n            else: with resourceful conventions and URL mappings. You shouldn\'t have to rewrite\n            your entire app when you go realtime.\n            </p>\n          </li>\n          <li>\n            <p>\n            Sails.js provides basic security and role-based access control by default,  and you can\n            add as many custom policies as you like. These flexible mappings make it simple to\n            control access to various controllers and actions, and to apply parameter validation.\n            That way, before you even start writing business logic, you know the user is\n            authorized and you have all the data you need.\n            </p>\n          </li>\n          <li>\n            <p>\n            Because Express and Socket.io share the same configurable session store, all of your\n            secuity policies are reused for realtime WebSocket requests as well.\n            </p>\n          </li>\n          <li>\n            <p>\n            Sails.js has automatic asset minification. In the past, you had to manually link to the CSS and\n            JavaScript for your UI. Not anymore. With Sails, you just put your files in the proper folder and they are automatically included in your layout. Then, when you\'re ready to\n            go into production, they are minified and gzipped to preserve as much bandwidth as\n            possible. That makes it easy to push your assets out to a CDN like CloudFront and make things load even faster.\n            </p>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <div class="sails-who">\n    <div class="container">\n      <h1>What do users say about Sails?</h1>\n      <div class="socialize">\n        <div class="twitter side">\n          <div class="tweet">\n            <h2><a target="_blank" href="https://twitter.com/cbmeeks">@cbmeeks</a>:</h2>\n            <p>\n            OMG I\'ve been using <a target="_blank" href="https://twitter.com/search?q=%23sailsjs&amp;src=typd">#sailsjs</a> and I am in friggin love!!  Where have you been all my life?\n            </p>\n          </div>\n        </div>\n        <div class="twitter middle">\n          <div class="tweet">\n            <h2><a target="_blank" href="https://twitter.com/FeedJoelPie">@FeedJoelPie</a>:</h2>\n            <p>\n            Very excited to try <a target="_blank" href="https://twitter.com/sailsjs">@sailsjs</a>. 1st Railsy framework in <a target="_blank" href="https://twitter.com/nodejs">@nodejs</a> that didn\'t make me yell "STOP TRYING TO BUILD RAILS IN NODE!" at my computer.\n            </p>\n          </div>\n        </div>\n        <div class="twitter side">\n          <div class="tweet">\n            <h2><a target="_blank" href="https://twitter.com/rauchg">@rauchg</a>:</h2>\n            <p>\n            Wow <a target="_blank" href="http://balderdashy.github.com/sails/">http://balderdashy.github.com/sails/</a>\n            </p>\n          </div>\n        </div>\n      </div>\n      <div class="join">\n        <h2>Join the vibrant community of Sails.js users and contributers:</h2>\n        <div class="social-icons clearfix">\n          <a class="social-button" target="_blank" href="https://github.com/balderdashy/sails">\n          <div class="github-follow button">Follow on Github</div></a>\n          <a class="social-button" target="_blank" href="https://twitter.com/sailsjs">\n          <div class="twitter-follow button">Follow on Twitter</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class="three-column">\n    <div class="container clearfix">\n      <div class="column left-column">\n        <h1>Philosophy</h1>\n        <p>\n        Like other MVC frameworks, Sails.js is built with an emphasis on developer happiness and a convention-over-configuration philosophy. But we took it a step further:\n        </p>\n        <p>\n        Just like with Node.js, using Sails means your app is written entirely in JavaScript, the language you and your team are already using on the frontend. This makes development much speedier than it was in the past!\n        </p>\n      </div>\n      <div class="column middle-column">\n        <h1>Performance</h1>\n        <p>\n        Since Sails.js is written in Node.js, your servers reap the performance benefits of an event-driven, asynchronous architecture.\n        </p>\n      </div>\n      <div class="column right-column">\n        <h1>Community</h1>\n        <p>\n        Sails.js is built on the rock-solid foundation of Express (for routing), EJS (for templating)\n        and Socket.io (for cross-platform WebSockets with graceful degredation), so you don\'t have\n        to worry about reinventing the wheel.\n        </p>\n        <p>\n        We also have an enthusiastic community of contributors, and the framework has had over one\n        thousand downloads every month on NPM since July 2012.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class="sails-whats-next">\n    <div class="container">\n      <h1>What\'s Next?</h1>\n      <p>\n      Easy, <a href="#!getStarted">get started</a> with your new Sails project, read up on the\n      <a id="doc" href="#!documentation">documentation</a> or support our growing community of followers\n      over on <a href="https://github.com/balderdashy/sails">github</a>.\n      </p>\n      <div class="call-to-actions">\n        <a href="#!getStarted" class="button">Get started</a>\n        <a class="doc" href="#!documentation">Documentation</a>\n      </div>\n    </div>\n    <div class="bottom-waves">\n    </div>\n  </div>\n  <div class="sails-love">\n    <div class="container clearfix">\n      <div class="built">\n        <region default="Love"></region>\n      </div>\n      <ul class="footer-nav">\n        <li><a class="balloon" href="#!">Home</a></li>\n        <li><a class="balloon" href="#!getStarted">Get started</a></li>\n        <li><a class="balloon" href="#!documentation">Documentation</a></li>\n        <li><a class="balloon" target="_blank" href="http://michaelmcneil.com">Blog</a></li>\n        <li><a target="_blank" href="http://sails.mit-license.org/"><span>License</span></a></li>\n      </ul>\n      <span class="c-mobile">&copy; 2012-2013 Sails.js. All Rights Reserved</span>\n    </div>\n  </div>\n  <div class="bottom">\n    <div class="sharing container clearfix">\n      <div class="star">\n        <iframe src="http://ghbtns.com/github-btn.html?user=balderdashy&amp;repo=sails&amp;type=watch&amp;count=true"\n        allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>\n      </div>\n      <div>\n        <iframe src="//www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fsailsjs&amp;width=75&amp;layout=button_count&amp;action=like&amp;show_faces=false&amp;share=false&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:86px; height:21px;" allowTransparency="true"></iframe>\n      </div>\n      <!-- AddThis Button BEGIN -->\n      <div class="addthis_toolbox addthis_default_style ">\n        <a class="addthis_button_tweet"></a>\n      </div>\n      <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=xa-51439c1933b12a9f"></script>\n      <!-- AddThis Button END -->\n      <a class="small-button" href="#!getStarted">Get started</a>\n    </div>\n  </div>\n</div>\n';

}
return __p
};